/*
 * lodgea-java
 * LODGEA SDK for java. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@lodgea.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lodgea.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.lodgea.model.InlineResponse2001GeoLocation;
import com.lodgea.model.InlineResponse2003PropertyPropertyInfoAcceptedPaymentList;
import com.lodgea.model.InlineResponse2003PropertyPropertyInfoMessageList;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * General information regarding the property.
 */
@ApiModel(description = "General information regarding the property.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-07T12:22:24.387616647Z[Etc/UTC]")
public class InlineResponse2003PropertyPropertyInfo {
  public static final String SERIALIZED_NAME_UNIT_COUNT = "unitCount";
  @SerializedName(SERIALIZED_NAME_UNIT_COUNT)
  private BigDecimal unitCount;

  public static final String SERIALIZED_NAME_MESSAGE_LIST = "messageList";
  @SerializedName(SERIALIZED_NAME_MESSAGE_LIST)
  private List<InlineResponse2003PropertyPropertyInfoMessageList> messageList = new ArrayList<InlineResponse2003PropertyPropertyInfoMessageList>();

  /**
   * A property class type code.&lt;p&gt;See also &lt;a href&#x3D;\&quot;#propertyclass-type-codes\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt;
   */
  @JsonAdapter(CategoryListEnum.Adapter.class)
  public enum CategoryListEnum {
    NUMBER_1(new BigDecimal("1")),
    
    NUMBER_2(new BigDecimal("2")),
    
    NUMBER_3(new BigDecimal("3")),
    
    NUMBER_4(new BigDecimal("4")),
    
    NUMBER_5(new BigDecimal("5")),
    
    NUMBER_6(new BigDecimal("6")),
    
    NUMBER_7(new BigDecimal("7")),
    
    NUMBER_8(new BigDecimal("8")),
    
    NUMBER_9(new BigDecimal("9")),
    
    NUMBER_10(new BigDecimal("10")),
    
    NUMBER_11(new BigDecimal("11")),
    
    NUMBER_12(new BigDecimal("12")),
    
    NUMBER_13(new BigDecimal("13")),
    
    NUMBER_14(new BigDecimal("14")),
    
    NUMBER_15(new BigDecimal("15")),
    
    NUMBER_16(new BigDecimal("16")),
    
    NUMBER_17(new BigDecimal("17")),
    
    NUMBER_18(new BigDecimal("18")),
    
    NUMBER_19(new BigDecimal("19")),
    
    NUMBER_20(new BigDecimal("20")),
    
    NUMBER_21(new BigDecimal("21")),
    
    NUMBER_22(new BigDecimal("22")),
    
    NUMBER_23(new BigDecimal("23")),
    
    NUMBER_24(new BigDecimal("24")),
    
    NUMBER_25(new BigDecimal("25")),
    
    NUMBER_26(new BigDecimal("26")),
    
    NUMBER_27(new BigDecimal("27")),
    
    NUMBER_28(new BigDecimal("28")),
    
    NUMBER_29(new BigDecimal("29")),
    
    NUMBER_30(new BigDecimal("30")),
    
    NUMBER_31(new BigDecimal("31")),
    
    NUMBER_32(new BigDecimal("32")),
    
    NUMBER_33(new BigDecimal("33")),
    
    NUMBER_34(new BigDecimal("34")),
    
    NUMBER_35(new BigDecimal("35")),
    
    NUMBER_36(new BigDecimal("36")),
    
    NUMBER_37(new BigDecimal("37")),
    
    NUMBER_38(new BigDecimal("38")),
    
    NUMBER_39(new BigDecimal("39")),
    
    NUMBER_40(new BigDecimal("40")),
    
    NUMBER_41(new BigDecimal("41")),
    
    NUMBER_42(new BigDecimal("42")),
    
    NUMBER_43(new BigDecimal("43")),
    
    NUMBER_44(new BigDecimal("44")),
    
    NUMBER_45(new BigDecimal("45")),
    
    NUMBER_46(new BigDecimal("46")),
    
    NUMBER_47(new BigDecimal("47")),
    
    NUMBER_48(new BigDecimal("48")),
    
    NUMBER_49(new BigDecimal("49")),
    
    NUMBER_50(new BigDecimal("50")),
    
    NUMBER_51(new BigDecimal("51")),
    
    NUMBER_52(new BigDecimal("52")),
    
    NUMBER_53(new BigDecimal("53")),
    
    NUMBER_54(new BigDecimal("54")),
    
    NUMBER_55(new BigDecimal("55")),
    
    NUMBER_56(new BigDecimal("56")),
    
    NUMBER_57(new BigDecimal("57")),
    
    NUMBER_58(new BigDecimal("58")),
    
    NUMBER_59(new BigDecimal("59")),
    
    NUMBER_60(new BigDecimal("60")),
    
    NUMBER_61(new BigDecimal("61")),
    
    NUMBER_62(new BigDecimal("62")),
    
    NUMBER_5000(new BigDecimal("5000")),
    
    NUMBER_5001(new BigDecimal("5001")),
    
    NUMBER_5002(new BigDecimal("5002")),
    
    NUMBER_5003(new BigDecimal("5003")),
    
    NUMBER_5004(new BigDecimal("5004")),
    
    NUMBER_5005(new BigDecimal("5005")),
    
    NUMBER_5006(new BigDecimal("5006")),
    
    NUMBER_5007(new BigDecimal("5007")),
    
    NUMBER_5008(new BigDecimal("5008")),
    
    NUMBER_5009(new BigDecimal("5009"));

    private BigDecimal value;

    CategoryListEnum(BigDecimal value) {
      this.value = value;
    }

    public BigDecimal getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryListEnum fromValue(BigDecimal value) {
      for (CategoryListEnum b : CategoryListEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryListEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryListEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryListEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryListEnum.fromValue(new BigDecimal(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY_LIST = "categoryList";
  @SerializedName(SERIALIZED_NAME_CATEGORY_LIST)
  private List<CategoryListEnum> categoryList = new ArrayList<CategoryListEnum>();

  /**
   * Gets or Sets languageList
   */
  @JsonAdapter(LanguageListEnum.Adapter.class)
  public enum LanguageListEnum {
    AF("af"),
    
    AR("ar"),
    
    AZ("az"),
    
    BE("be"),
    
    BG("bg"),
    
    CA("ca"),
    
    CS("cs"),
    
    DA("da"),
    
    DE("de"),
    
    EL("el"),
    
    EN("en"),
    
    EN_GB("en-gb"),
    
    EN_US("en-us"),
    
    ES("es"),
    
    ES_AR("es-ar"),
    
    ET("et"),
    
    FR("fr"),
    
    FI("fi"),
    
    HE("he"),
    
    HI("hi"),
    
    HR("hr"),
    
    HU("hu"),
    
    ID("id"),
    
    IS("is"),
    
    IT("it"),
    
    JA("ja"),
    
    KM("km"),
    
    KO("ko"),
    
    LO("lo"),
    
    LT("lt"),
    
    LV("lv"),
    
    MS("ms"),
    
    NL("nl"),
    
    NO("no"),
    
    PL("pl"),
    
    PT("pt"),
    
    PT_BR("pt-br"),
    
    PT_PT("pt-pt"),
    
    RO("ro"),
    
    RU("ru"),
    
    SK("sk"),
    
    SL("sl"),
    
    SR("sr"),
    
    SV("sv"),
    
    TL("tl"),
    
    TH("th"),
    
    TR("tr"),
    
    UK("uk"),
    
    VI("vi"),
    
    XA("xa"),
    
    XB("xb"),
    
    XS("xs"),
    
    XT("xt"),
    
    XU("xu"),
    
    ZH("zh"),
    
    ZH_CN("zh-cn"),
    
    ZH_TW("zh-tw");

    private String value;

    LanguageListEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LanguageListEnum fromValue(String value) {
      for (LanguageListEnum b : LanguageListEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LanguageListEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LanguageListEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LanguageListEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LanguageListEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LANGUAGE_LIST = "languageList";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_LIST)
  private List<LanguageListEnum> languageList = new ArrayList<LanguageListEnum>();

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private InlineResponse2001GeoLocation location;

  public static final String SERIALIZED_NAME_ACCEPTED_PAYMENT_LIST = "acceptedPaymentList";
  @SerializedName(SERIALIZED_NAME_ACCEPTED_PAYMENT_LIST)
  private List<InlineResponse2003PropertyPropertyInfoAcceptedPaymentList> acceptedPaymentList = new ArrayList<InlineResponse2003PropertyPropertyInfoAcceptedPaymentList>();

  public InlineResponse2003PropertyPropertyInfo() { 
  }

  public InlineResponse2003PropertyPropertyInfo unitCount(BigDecimal unitCount) {
    
    this.unitCount = unitCount;
    return this;
  }

   /**
   * The amount of units the property has.
   * @return unitCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4", value = "The amount of units the property has.")

  public BigDecimal getUnitCount() {
    return unitCount;
  }


  public void setUnitCount(BigDecimal unitCount) {
    this.unitCount = unitCount;
  }


  public InlineResponse2003PropertyPropertyInfo messageList(List<InlineResponse2003PropertyPropertyInfoMessageList> messageList) {
    
    this.messageList = messageList;
    return this;
  }

  public InlineResponse2003PropertyPropertyInfo addMessageListItem(InlineResponse2003PropertyPropertyInfoMessageList messageListItem) {
    this.messageList.add(messageListItem);
    return this;
  }

   /**
   * Contains a descriptive message for this property in all supported languages.
   * @return messageList
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "[{\"languageCode\":\"en\",\"text\":\"More sea does not work! In a unique location just behind the dunes, less than 100 steps from the beach and the spa promenade, in a prime location on the beach “Nordhedig”, you can enjoy your stay in a small, new 5-star luxury complex (DTV classification) with a total of 4 separate apartments for 2-4 people. The interior has a modern rural style that offers all the amenities. You can find films about the property and individual apartments on our website. \"},{\"languageCode\":\"da\",\"text\":\"Mere hav virker ikke! I en unik beliggenhed lige bag klitterne, mindre end 100 skridt fra stranden og spa-promenaden, i en førsteklasses beliggenhed på stranden „Nordhedig“, kan du nyde dit ophold i et lille, nyt 5-stjernet luksuskompleks (DTV klassifikation) med i alt 4 separate lejligheder til 2-4 personer. Interiøret har en moderne landlig stil, der tilbyder alle bekvemmeligheder. Du kan finde film om ejendommen og individuelle lejligheder på vores hjemmeside. \"},{\"languageCode\":\"nl\",\"text\":\"Meer zee werkt niet! Op een unieke locatie net achter de duinen, op minder dan 100 stappen van het strand en de spa-promenade, op een toplocatie aan het strand „Nordhedig”, kunt u genieten van uw verblijf in een klein, nieuw 5-sterren luxe complex (DTV classificatie) met in totaal 4 aparte appartementen voor 2-4 personen. Het interieur heeft een moderne landelijke stijl die alle voorzieningen biedt. U kunt films over het pand en de individuele appartementen vinden op onze website. \"},{\"languageCode\":\"de\",\"text\":\"Mehr Meer geht nicht! In einer einzigartigen Lage direkt hinter den Dünen, weniger als 100 Schritte vom Strand und der Kurpromenade entfernt, in bester Lage am Strand „Nordhedig“, können Sie Ihren Aufenthalt in einem kleinen, neuen 5-Sterne-Luxuskomplex (DTV-Klassifizierung) mit insgesamt 4 separaten Apartments für 2-4 Personen genießen. Das Interieur hat einen modernen ländlichen Stil, der alle Annehmlichkeiten bietet. Filme über das Anwesen und einzelne Apartments finden Sie auf unserer Website. \"}]", required = true, value = "Contains a descriptive message for this property in all supported languages.")

  public List<InlineResponse2003PropertyPropertyInfoMessageList> getMessageList() {
    return messageList;
  }


  public void setMessageList(List<InlineResponse2003PropertyPropertyInfoMessageList> messageList) {
    this.messageList = messageList;
  }


  public InlineResponse2003PropertyPropertyInfo categoryList(List<CategoryListEnum> categoryList) {
    
    this.categoryList = categoryList;
    return this;
  }

  public InlineResponse2003PropertyPropertyInfo addCategoryListItem(CategoryListEnum categoryListItem) {
    this.categoryList.add(categoryListItem);
    return this;
  }

   /**
   * A list of code of the property class types that apply to the property.
   * @return categoryList
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "[1,14,42]", required = true, value = "A list of code of the property class types that apply to the property.")

  public List<CategoryListEnum> getCategoryList() {
    return categoryList;
  }


  public void setCategoryList(List<CategoryListEnum> categoryList) {
    this.categoryList = categoryList;
  }


  public InlineResponse2003PropertyPropertyInfo languageList(List<LanguageListEnum> languageList) {
    
    this.languageList = languageList;
    return this;
  }

  public InlineResponse2003PropertyPropertyInfo addLanguageListItem(LanguageListEnum languageListItem) {
    this.languageList.add(languageListItem);
    return this;
  }

   /**
   * The codes of languages the staff of this property can speak. Please note that these codes partially differ from the two character ISO language codes widely used throughout the API as they partially include country specific language code.&lt;p&gt;See also &lt;a href&#x3D;\&quot;#languagecountry-code\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt;
   * @return languageList
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "[\"de\",\"en-gb\"]", required = true, value = "The codes of languages the staff of this property can speak. Please note that these codes partially differ from the two character ISO language codes widely used throughout the API as they partially include country specific language code.<p>See also <a href=\"#languagecountry-code\">in the appendix</a>.</p>")

  public List<LanguageListEnum> getLanguageList() {
    return languageList;
  }


  public void setLanguageList(List<LanguageListEnum> languageList) {
    this.languageList = languageList;
  }


  public InlineResponse2003PropertyPropertyInfo location(InlineResponse2001GeoLocation location) {
    
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public InlineResponse2001GeoLocation getLocation() {
    return location;
  }


  public void setLocation(InlineResponse2001GeoLocation location) {
    this.location = location;
  }


  public InlineResponse2003PropertyPropertyInfo acceptedPaymentList(List<InlineResponse2003PropertyPropertyInfoAcceptedPaymentList> acceptedPaymentList) {
    
    this.acceptedPaymentList = acceptedPaymentList;
    return this;
  }

  public InlineResponse2003PropertyPropertyInfo addAcceptedPaymentListItem(InlineResponse2003PropertyPropertyInfoAcceptedPaymentList acceptedPaymentListItem) {
    this.acceptedPaymentList.add(acceptedPaymentListItem);
    return this;
  }

   /**
   * A list of the accepted payment methods. Payment methods might subject to frequent change as payment providers come and go. You should always implement a way to handle new, unexpected payment methods.&lt;p&gt;See also &lt;a href&#x3D;\&quot;#paymenttypes\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt;
   * @return acceptedPaymentList
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A list of the accepted payment methods. Payment methods might subject to frequent change as payment providers come and go. You should always implement a way to handle new, unexpected payment methods.<p>See also <a href=\"#paymenttypes\">in the appendix</a>.</p>")

  public List<InlineResponse2003PropertyPropertyInfoAcceptedPaymentList> getAcceptedPaymentList() {
    return acceptedPaymentList;
  }


  public void setAcceptedPaymentList(List<InlineResponse2003PropertyPropertyInfoAcceptedPaymentList> acceptedPaymentList) {
    this.acceptedPaymentList = acceptedPaymentList;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2003PropertyPropertyInfo inlineResponse2003PropertyPropertyInfo = (InlineResponse2003PropertyPropertyInfo) o;
    return Objects.equals(this.unitCount, inlineResponse2003PropertyPropertyInfo.unitCount) &&
        Objects.equals(this.messageList, inlineResponse2003PropertyPropertyInfo.messageList) &&
        Objects.equals(this.categoryList, inlineResponse2003PropertyPropertyInfo.categoryList) &&
        Objects.equals(this.languageList, inlineResponse2003PropertyPropertyInfo.languageList) &&
        Objects.equals(this.location, inlineResponse2003PropertyPropertyInfo.location) &&
        Objects.equals(this.acceptedPaymentList, inlineResponse2003PropertyPropertyInfo.acceptedPaymentList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(unitCount, messageList, categoryList, languageList, location, acceptedPaymentList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2003PropertyPropertyInfo {\n");
    sb.append("    unitCount: ").append(toIndentedString(unitCount)).append("\n");
    sb.append("    messageList: ").append(toIndentedString(messageList)).append("\n");
    sb.append("    categoryList: ").append(toIndentedString(categoryList)).append("\n");
    sb.append("    languageList: ").append(toIndentedString(languageList)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    acceptedPaymentList: ").append(toIndentedString(acceptedPaymentList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

