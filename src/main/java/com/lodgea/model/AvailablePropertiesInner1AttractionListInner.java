/*
 * lodgea-java
 * LODGEA SDK for Java. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@lodgea.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lodgea.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.lodgea.model.AvailablePropertiesInner1AttractionListInnerDistance;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.lodgea.JSON;

/**
 * AvailablePropertiesInner1AttractionListInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-26T16:09:38.541455406Z[Etc/UTC]")
public class AvailablePropertiesInner1AttractionListInner {
  /**
   * The code for this attraction type.&lt;p&gt;See also &lt;a href&#x3D;\&quot;#attractioncategory-codes\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt;
   */
  @JsonAdapter(TypeCodeEnum.Adapter.class)
  public enum TypeCodeEnum {
    NUMBER_1(new BigDecimal("1")),
    
    NUMBER_2(new BigDecimal("2")),
    
    NUMBER_3(new BigDecimal("3")),
    
    NUMBER_4(new BigDecimal("4")),
    
    NUMBER_5(new BigDecimal("5")),
    
    NUMBER_6(new BigDecimal("6")),
    
    NUMBER_7(new BigDecimal("7")),
    
    NUMBER_8(new BigDecimal("8")),
    
    NUMBER_9(new BigDecimal("9")),
    
    NUMBER_10(new BigDecimal("10")),
    
    NUMBER_11(new BigDecimal("11")),
    
    NUMBER_12(new BigDecimal("12")),
    
    NUMBER_13(new BigDecimal("13")),
    
    NUMBER_14(new BigDecimal("14")),
    
    NUMBER_15(new BigDecimal("15")),
    
    NUMBER_16(new BigDecimal("16")),
    
    NUMBER_17(new BigDecimal("17")),
    
    NUMBER_18(new BigDecimal("18")),
    
    NUMBER_19(new BigDecimal("19")),
    
    NUMBER_20(new BigDecimal("20")),
    
    NUMBER_21(new BigDecimal("21")),
    
    NUMBER_22(new BigDecimal("22")),
    
    NUMBER_23(new BigDecimal("23")),
    
    NUMBER_24(new BigDecimal("24")),
    
    NUMBER_25(new BigDecimal("25")),
    
    NUMBER_26(new BigDecimal("26")),
    
    NUMBER_27(new BigDecimal("27")),
    
    NUMBER_28(new BigDecimal("28")),
    
    NUMBER_29(new BigDecimal("29")),
    
    NUMBER_30(new BigDecimal("30")),
    
    NUMBER_31(new BigDecimal("31")),
    
    NUMBER_32(new BigDecimal("32")),
    
    NUMBER_33(new BigDecimal("33")),
    
    NUMBER_34(new BigDecimal("34")),
    
    NUMBER_35(new BigDecimal("35")),
    
    NUMBER_36(new BigDecimal("36")),
    
    NUMBER_37(new BigDecimal("37")),
    
    NUMBER_38(new BigDecimal("38")),
    
    NUMBER_39(new BigDecimal("39")),
    
    NUMBER_40(new BigDecimal("40")),
    
    NUMBER_41(new BigDecimal("41")),
    
    NUMBER_42(new BigDecimal("42")),
    
    NUMBER_43(new BigDecimal("43")),
    
    NUMBER_44(new BigDecimal("44")),
    
    NUMBER_45(new BigDecimal("45")),
    
    NUMBER_46(new BigDecimal("46")),
    
    NUMBER_47(new BigDecimal("47")),
    
    NUMBER_48(new BigDecimal("48")),
    
    NUMBER_49(new BigDecimal("49")),
    
    NUMBER_50(new BigDecimal("50")),
    
    NUMBER_51(new BigDecimal("51")),
    
    NUMBER_52(new BigDecimal("52")),
    
    NUMBER_53(new BigDecimal("53")),
    
    NUMBER_54(new BigDecimal("54")),
    
    NUMBER_55(new BigDecimal("55")),
    
    NUMBER_56(new BigDecimal("56")),
    
    NUMBER_57(new BigDecimal("57")),
    
    NUMBER_58(new BigDecimal("58")),
    
    NUMBER_59(new BigDecimal("59")),
    
    NUMBER_60(new BigDecimal("60")),
    
    NUMBER_61(new BigDecimal("61")),
    
    NUMBER_62(new BigDecimal("62")),
    
    NUMBER_63(new BigDecimal("63")),
    
    NUMBER_64(new BigDecimal("64")),
    
    NUMBER_65(new BigDecimal("65")),
    
    NUMBER_66(new BigDecimal("66")),
    
    NUMBER_67(new BigDecimal("67")),
    
    NUMBER_68(new BigDecimal("68")),
    
    NUMBER_69(new BigDecimal("69")),
    
    NUMBER_70(new BigDecimal("70")),
    
    NUMBER_71(new BigDecimal("71")),
    
    NUMBER_72(new BigDecimal("72")),
    
    NUMBER_73(new BigDecimal("73")),
    
    NUMBER_74(new BigDecimal("74")),
    
    NUMBER_75(new BigDecimal("75")),
    
    NUMBER_76(new BigDecimal("76")),
    
    NUMBER_77(new BigDecimal("77")),
    
    NUMBER_78(new BigDecimal("78")),
    
    NUMBER_79(new BigDecimal("79")),
    
    NUMBER_80(new BigDecimal("80")),
    
    NUMBER_81(new BigDecimal("81")),
    
    NUMBER_82(new BigDecimal("82")),
    
    NUMBER_83(new BigDecimal("83")),
    
    NUMBER_84(new BigDecimal("84")),
    
    NUMBER_85(new BigDecimal("85")),
    
    NUMBER_86(new BigDecimal("86")),
    
    NUMBER_87(new BigDecimal("87")),
    
    NUMBER_88(new BigDecimal("88")),
    
    NUMBER_89(new BigDecimal("89")),
    
    NUMBER_90(new BigDecimal("90")),
    
    NUMBER_91(new BigDecimal("91")),
    
    NUMBER_92(new BigDecimal("92")),
    
    NUMBER_93(new BigDecimal("93")),
    
    NUMBER_94(new BigDecimal("94")),
    
    NUMBER_95(new BigDecimal("95")),
    
    NUMBER_96(new BigDecimal("96")),
    
    NUMBER_97(new BigDecimal("97")),
    
    NUMBER_98(new BigDecimal("98")),
    
    NUMBER_99(new BigDecimal("99")),
    
    NUMBER_100(new BigDecimal("100")),
    
    NUMBER_101(new BigDecimal("101")),
    
    NUMBER_102(new BigDecimal("102")),
    
    NUMBER_103(new BigDecimal("103")),
    
    NUMBER_104(new BigDecimal("104")),
    
    NUMBER_105(new BigDecimal("105")),
    
    NUMBER_106(new BigDecimal("106")),
    
    NUMBER_107(new BigDecimal("107")),
    
    NUMBER_108(new BigDecimal("108")),
    
    NUMBER_109(new BigDecimal("109")),
    
    NUMBER_110(new BigDecimal("110")),
    
    NUMBER_90001(new BigDecimal("90001")),
    
    NUMBER_90002(new BigDecimal("90002")),
    
    NUMBER_90003(new BigDecimal("90003")),
    
    NUMBER_90004(new BigDecimal("90004")),
    
    NUMBER_90005(new BigDecimal("90005")),
    
    NUMBER_90006(new BigDecimal("90006")),
    
    NUMBER_90007(new BigDecimal("90007")),
    
    NUMBER_90008(new BigDecimal("90008")),
    
    NUMBER_90009(new BigDecimal("90009")),
    
    NUMBER_90010(new BigDecimal("90010"));

    private BigDecimal value;

    TypeCodeEnum(BigDecimal value) {
      this.value = value;
    }

    public BigDecimal getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeCodeEnum fromValue(BigDecimal value) {
      for (TypeCodeEnum b : TypeCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeCodeEnum.fromValue(new BigDecimal(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE_CODE = "typeCode";
  @SerializedName(SERIALIZED_NAME_TYPE_CODE)
  private TypeCodeEnum typeCode;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DISTANCE = "distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  private AvailablePropertiesInner1AttractionListInnerDistance distance;

  public AvailablePropertiesInner1AttractionListInner() { 
  }

  public AvailablePropertiesInner1AttractionListInner typeCode(TypeCodeEnum typeCode) {
    
    this.typeCode = typeCode;
    return this;
  }

   /**
   * The code for this attraction type.&lt;p&gt;See also &lt;a href&#x3D;\&quot;#attractioncategory-codes\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt;
   * @return typeCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The code for this attraction type.<p>See also <a href=\"#attractioncategory-codes\">in the appendix</a>.</p>")

  public TypeCodeEnum getTypeCode() {
    return typeCode;
  }


  public void setTypeCode(TypeCodeEnum typeCode) {
    this.typeCode = typeCode;
  }


  public AvailablePropertiesInner1AttractionListInner name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the attraction. Names are proper nouns and therefore not affected by the given language code.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Flughafen Sylt", required = true, value = "The name of the attraction. Names are proper nouns and therefore not affected by the given language code.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public AvailablePropertiesInner1AttractionListInner distance(AvailablePropertiesInner1AttractionListInnerDistance distance) {
    
    this.distance = distance;
    return this;
  }

   /**
   * Get distance
   * @return distance
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public AvailablePropertiesInner1AttractionListInnerDistance getDistance() {
    return distance;
  }


  public void setDistance(AvailablePropertiesInner1AttractionListInnerDistance distance) {
    this.distance = distance;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AvailablePropertiesInner1AttractionListInner availablePropertiesInner1AttractionListInner = (AvailablePropertiesInner1AttractionListInner) o;
    return Objects.equals(this.typeCode, availablePropertiesInner1AttractionListInner.typeCode) &&
        Objects.equals(this.name, availablePropertiesInner1AttractionListInner.name) &&
        Objects.equals(this.distance, availablePropertiesInner1AttractionListInner.distance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(typeCode, name, distance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AvailablePropertiesInner1AttractionListInner {\n");
    sb.append("    typeCode: ").append(toIndentedString(typeCode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("typeCode");
    openapiFields.add("name");
    openapiFields.add("distance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("typeCode");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("distance");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AvailablePropertiesInner1AttractionListInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (AvailablePropertiesInner1AttractionListInner.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in AvailablePropertiesInner1AttractionListInner is not found in the empty JSON string", AvailablePropertiesInner1AttractionListInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AvailablePropertiesInner1AttractionListInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AvailablePropertiesInner1AttractionListInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AvailablePropertiesInner1AttractionListInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `distance`
      if (jsonObj.getAsJsonObject("distance") != null) {
        AvailablePropertiesInner1AttractionListInnerDistance.validateJsonObject(jsonObj.getAsJsonObject("distance"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AvailablePropertiesInner1AttractionListInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AvailablePropertiesInner1AttractionListInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AvailablePropertiesInner1AttractionListInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AvailablePropertiesInner1AttractionListInner.class));

       return (TypeAdapter<T>) new TypeAdapter<AvailablePropertiesInner1AttractionListInner>() {
           @Override
           public void write(JsonWriter out, AvailablePropertiesInner1AttractionListInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AvailablePropertiesInner1AttractionListInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AvailablePropertiesInner1AttractionListInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AvailablePropertiesInner1AttractionListInner
  * @throws IOException if the JSON string is invalid with respect to AvailablePropertiesInner1AttractionListInner
  */
  public static AvailablePropertiesInner1AttractionListInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AvailablePropertiesInner1AttractionListInner.class);
  }

 /**
  * Convert an instance of AvailablePropertiesInner1AttractionListInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

