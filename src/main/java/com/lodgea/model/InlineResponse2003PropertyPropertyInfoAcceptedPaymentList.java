/*
 * lodgea-java
 * LODGEA SDK for java. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@lodgea.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lodgea.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * InlineResponse2003PropertyPropertyInfoAcceptedPaymentList
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-07T12:22:24.387616647Z[Etc/UTC]")
public class InlineResponse2003PropertyPropertyInfoAcceptedPaymentList {
  /**
   * The code of the payment option.
   */
  @JsonAdapter(CodeEnum.Adapter.class)
  public enum CodeEnum {
    AMEX("amex"),
    
    VISA("visa"),
    
    MASTERCARD("mastercard"),
    
    DINERS("diners"),
    
    JCB("jcb"),
    
    MAESTRO("maestro"),
    
    DISCOVER("discover"),
    
    BANCONTACT("bancontact"),
    
    CASHONLY("cashonly"),
    
    BANKCARD("bankcard"),
    
    CARTASI("cartasi"),
    
    ARGENCARD("argencard"),
    
    CABAL("cabal"),
    
    REDCOMPRA("redcompra"),
    
    OTHER("other"),
    
    GREATWALL("greatwall"),
    
    DRAGONPAY("dragonpay"),
    
    EFTPOS("eftpos"),
    
    HIPERCARD("hipercard"),
    
    UNIONPAYDEBIT("unionpaydebit"),
    
    ECCARD("eccard"),
    
    BCCARD("bccard"),
    
    MASTERCARDVIRTUAL("mastercardvirtual"),
    
    MASTERCARDGOOGLE("mastercardgoogle"),
    
    UNIONPAYCREDIT("unionpaycredit");

    private String value;

    CodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CodeEnum fromValue(String value) {
      for (CodeEnum b : CodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CodeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private CodeEnum code;

  /**
   * The type of the payment option.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    CREDITCARD("creditcard"),
    
    DEBITCARD("debitcard"),
    
    PAYMENTSERVICE("paymentservice"),
    
    CASH("cash");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public InlineResponse2003PropertyPropertyInfoAcceptedPaymentList() { 
  }

  public InlineResponse2003PropertyPropertyInfoAcceptedPaymentList code(CodeEnum code) {
    
    this.code = code;
    return this;
  }

   /**
   * The code of the payment option.
   * @return code
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "eccard", required = true, value = "The code of the payment option.")

  public CodeEnum getCode() {
    return code;
  }


  public void setCode(CodeEnum code) {
    this.code = code;
  }


  public InlineResponse2003PropertyPropertyInfoAcceptedPaymentList type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of the payment option.
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "debitcard", required = true, value = "The type of the payment option.")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2003PropertyPropertyInfoAcceptedPaymentList inlineResponse2003PropertyPropertyInfoAcceptedPaymentList = (InlineResponse2003PropertyPropertyInfoAcceptedPaymentList) o;
    return Objects.equals(this.code, inlineResponse2003PropertyPropertyInfoAcceptedPaymentList.code) &&
        Objects.equals(this.type, inlineResponse2003PropertyPropertyInfoAcceptedPaymentList.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2003PropertyPropertyInfoAcceptedPaymentList {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

