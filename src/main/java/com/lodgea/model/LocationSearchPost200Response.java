/*
 * lodgea-java
 * LODGEA SDK for java. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@lodgea.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lodgea.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.lodgea.model.AvailablePropertiesInner;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.lodgea.JSON;

/**
 * LocationSearchPost200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-06T17:11:31.294726198Z[Etc/UTC]")
public class LocationSearchPost200Response {
  /**
   * The language code of the language in which the descriptive texts for each found location are returned.&lt;p&gt;Please note that beside the general restrictions listed below only languages configured during system setup for your respective tenant are allowed.&lt;/p&gt;&lt;p&gt;See also &lt;a href&#x3D;\&quot;#isolanguage-codes\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt;
   */
  @JsonAdapter(LanguageCodeEnum.Adapter.class)
  public enum LanguageCodeEnum {
    AF("af"),
    
    AR("ar"),
    
    BG("bg"),
    
    CA("ca"),
    
    CS("cs"),
    
    DA("da"),
    
    DE("de"),
    
    EL("el"),
    
    EN("en"),
    
    ES("es"),
    
    ET("et"),
    
    FI("fi"),
    
    FR("fr"),
    
    HE("he"),
    
    HI("hi"),
    
    HR("hr"),
    
    HU("hu"),
    
    ID("id"),
    
    IS("is"),
    
    IT("it"),
    
    JA("ja"),
    
    KO("ko"),
    
    LT("lt"),
    
    LV("lv"),
    
    NL("nl"),
    
    NO("no"),
    
    PL("pl"),
    
    PT("pt"),
    
    RO("ro"),
    
    RU("ru"),
    
    SK("sk"),
    
    SL("sl"),
    
    SR("sr"),
    
    SV("sv"),
    
    TH("th"),
    
    TR("tr"),
    
    VI("vi"),
    
    ZH("zh");

    private String value;

    LanguageCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LanguageCodeEnum fromValue(String value) {
      for (LanguageCodeEnum b : LanguageCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LanguageCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LanguageCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LanguageCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LanguageCodeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "languageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private LanguageCodeEnum languageCode;

  public static final String SERIALIZED_NAME_LIST = "list";
  @SerializedName(SERIALIZED_NAME_LIST)
  private List<AvailablePropertiesInner> _list = new ArrayList<>();

  public LocationSearchPost200Response() {
  }

  public LocationSearchPost200Response languageCode(LanguageCodeEnum languageCode) {
    
    this.languageCode = languageCode;
    return this;
  }

   /**
   * The language code of the language in which the descriptive texts for each found location are returned.&lt;p&gt;Please note that beside the general restrictions listed below only languages configured during system setup for your respective tenant are allowed.&lt;/p&gt;&lt;p&gt;See also &lt;a href&#x3D;\&quot;#isolanguage-codes\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt;
   * @return languageCode
  **/
  @javax.annotation.Nonnull

  public LanguageCodeEnum getLanguageCode() {
    return languageCode;
  }


  public void setLanguageCode(LanguageCodeEnum languageCode) {
    this.languageCode = languageCode;
  }


  public LocationSearchPost200Response _list(List<AvailablePropertiesInner> _list) {
    
    this._list = _list;
    return this;
  }

  public LocationSearchPost200Response addListItem(AvailablePropertiesInner _listItem) {
    this._list.add(_listItem);
    return this;
  }

   /**
   * A list of available properties matching the given criteria.
   * @return _list
  **/
  @javax.annotation.Nonnull

  public List<AvailablePropertiesInner> getList() {
    return _list;
  }


  public void setList(List<AvailablePropertiesInner> _list) {
    this._list = _list;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LocationSearchPost200Response locationSearchPost200Response = (LocationSearchPost200Response) o;
    return Objects.equals(this.languageCode, locationSearchPost200Response.languageCode) &&
        Objects.equals(this._list, locationSearchPost200Response._list);
  }

  @Override
  public int hashCode() {
    return Objects.hash(languageCode, _list);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LocationSearchPost200Response {\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    _list: ").append(toIndentedString(_list)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("languageCode");
    openapiFields.add("list");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("languageCode");
    openapiRequiredFields.add("list");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LocationSearchPost200Response
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LocationSearchPost200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LocationSearchPost200Response is not found in the empty JSON string", LocationSearchPost200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!LocationSearchPost200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LocationSearchPost200Response` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LocationSearchPost200Response.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("languageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageCode").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("list").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `list` to be an array in the JSON string but got `%s`", jsonObj.get("list").toString()));
      }

      JsonArray jsonArray_list = jsonObj.getAsJsonArray("list");
      // validate the required field `list` (array)
      for (int i = 0; i < jsonArray_list.size(); i++) {
        AvailablePropertiesInner.validateJsonObject(jsonArray_list.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LocationSearchPost200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LocationSearchPost200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LocationSearchPost200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LocationSearchPost200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<LocationSearchPost200Response>() {
           @Override
           public void write(JsonWriter out, LocationSearchPost200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LocationSearchPost200Response read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LocationSearchPost200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LocationSearchPost200Response
  * @throws IOException if the JSON string is invalid with respect to LocationSearchPost200Response
  */
  public static LocationSearchPost200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LocationSearchPost200Response.class);
  }

 /**
  * Convert an instance of LocationSearchPost200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

