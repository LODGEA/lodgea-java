/*
 * lodgea-java
 * LODGEA SDK for java. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@lodgea.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lodgea.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * A Zod issue. More fields can be present depending on the issue type.
 */
@ApiModel(description = "A Zod issue. More fields can be present depending on the issue type.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-07T12:22:24.387616647Z[Etc/UTC]")
public class InlineResponse4001ValidationErrors {
  /**
   * The ZodIssueCode describing the issue.
   */
  @JsonAdapter(CodeEnum.Adapter.class)
  public enum CodeEnum {
    INVALID_TYPE("invalid_type"),
    
    INVALID_LITERAL("invalid_literal"),
    
    CUSTOM("custom"),
    
    INVALID_UNION("invalid_union"),
    
    INVALID_UNION_DISCRIMINATOR("invalid_union_discriminator"),
    
    INVALID_ENUM_VALUE("invalid_enum_value"),
    
    UNRECOGNIZED_KEYS("unrecognized_keys"),
    
    INVALID_ARGUMENTS("invalid_arguments"),
    
    INVALID_RETURN_TYPE("invalid_return_type"),
    
    INVALID_DATE("invalid_date"),
    
    INVALID_STRING("invalid_string"),
    
    TOO_SMALL("too_small"),
    
    TOO_BIG("too_big"),
    
    INVALID_INTERSECTION_TYPES("invalid_intersection_types"),
    
    NOT_MULTIPLE_OF("not_multiple_of"),
    
    NOT_FINITE("not_finite");

    private String value;

    CodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CodeEnum fromValue(String value) {
      for (CodeEnum b : CodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CodeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private CodeEnum code;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private List<String> path = new ArrayList<String>();

  public InlineResponse4001ValidationErrors() { 
  }

  public InlineResponse4001ValidationErrors code(CodeEnum code) {
    
    this.code = code;
    return this;
  }

   /**
   * The ZodIssueCode describing the issue.
   * @return code
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "invalid_type", required = true, value = "The ZodIssueCode describing the issue.")

  public CodeEnum getCode() {
    return code;
  }


  public void setCode(CodeEnum code) {
    this.code = code;
  }


  public InlineResponse4001ValidationErrors message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * A message describing the error in a human readable way.
   * @return message
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Invalid type. Expected string, received number.", required = true, value = "A message describing the error in a human readable way.")

  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    this.message = message;
  }


  public InlineResponse4001ValidationErrors path(List<String> path) {
    
    this.path = path;
    return this;
  }

  public InlineResponse4001ValidationErrors addPathItem(String pathItem) {
    this.path.add(pathItem);
    return this;
  }

   /**
   * An array describing the position of the faulty property. The first segment will always be either \&quot;body\&quot;, \&quot;pathParameters\&quot; or \&quot;queryParameters\&quot; indicating on which part of your request the error occurred.
   * @return path
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ref_3", required = true, value = "An array describing the position of the faulty property. The first segment will always be either \"body\", \"pathParameters\" or \"queryParameters\" indicating on which part of your request the error occurred.")

  public List<String> getPath() {
    return path;
  }


  public void setPath(List<String> path) {
    this.path = path;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse4001ValidationErrors inlineResponse4001ValidationErrors = (InlineResponse4001ValidationErrors) o;
    return Objects.equals(this.code, inlineResponse4001ValidationErrors.code) &&
        Objects.equals(this.message, inlineResponse4001ValidationErrors.message) &&
        Objects.equals(this.path, inlineResponse4001ValidationErrors.path);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, message, path);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse4001ValidationErrors {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

