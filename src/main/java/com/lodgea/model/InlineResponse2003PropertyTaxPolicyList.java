/*
 * lodgea-java
 * LODGEA SDK for java. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@lodgea.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lodgea.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * InlineResponse2003PropertyTaxPolicyList
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-07T12:22:24.387616647Z[Etc/UTC]")
public class InlineResponse2003PropertyTaxPolicyList {
  /**
   * The code that represents the type of tax.&lt;p&gt;See also &lt;a href&#x3D;\&quot;#taxtype-codes\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt;
   */
  @JsonAdapter(TypeCodeEnum.Adapter.class)
  public enum TypeCodeEnum {
    NUMBER_1(new BigDecimal("1")),
    
    NUMBER_3(new BigDecimal("3")),
    
    NUMBER_4(new BigDecimal("4")),
    
    NUMBER_5(new BigDecimal("5")),
    
    NUMBER_6(new BigDecimal("6")),
    
    NUMBER_7(new BigDecimal("7")),
    
    NUMBER_8(new BigDecimal("8")),
    
    NUMBER_10(new BigDecimal("10")),
    
    NUMBER_13(new BigDecimal("13")),
    
    NUMBER_15(new BigDecimal("15")),
    
    NUMBER_17(new BigDecimal("17")),
    
    NUMBER_18(new BigDecimal("18")),
    
    NUMBER_19(new BigDecimal("19")),
    
    NUMBER_28(new BigDecimal("28")),
    
    NUMBER_30(new BigDecimal("30")),
    
    NUMBER_35(new BigDecimal("35")),
    
    NUMBER_36(new BigDecimal("36")),
    
    NUMBER_39(new BigDecimal("39")),
    
    NUMBER_43(new BigDecimal("43")),
    
    NUMBER_46(new BigDecimal("46")),
    
    NUMBER_5001(new BigDecimal("5001")),
    
    NUMBER_5002(new BigDecimal("5002")),
    
    NUMBER_5004(new BigDecimal("5004")),
    
    NUMBER_5007(new BigDecimal("5007")),
    
    NUMBER_5008(new BigDecimal("5008"));

    private BigDecimal value;

    TypeCodeEnum(BigDecimal value) {
      this.value = value;
    }

    public BigDecimal getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeCodeEnum fromValue(BigDecimal value) {
      for (TypeCodeEnum b : TypeCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeCodeEnum.fromValue(new BigDecimal(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE_CODE = "typeCode";
  @SerializedName(SERIALIZED_NAME_TYPE_CODE)
  private TypeCodeEnum typeCode;

  public static final String SERIALIZED_NAME_PERCENT = "percent";
  @SerializedName(SERIALIZED_NAME_PERCENT)
  private BigDecimal percent;

  /**
   * The type of charge.
   */
  @JsonAdapter(ChargeTypeEnum.Adapter.class)
  public enum ChargeTypeEnum {
    INCLUDED("included"),
    
    EXCLUDED("excluded"),
    
    CONDITIONAL("conditional");

    private String value;

    ChargeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChargeTypeEnum fromValue(String value) {
      for (ChargeTypeEnum b : ChargeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChargeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChargeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChargeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChargeTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CHARGE_TYPE = "chargeType";
  @SerializedName(SERIALIZED_NAME_CHARGE_TYPE)
  private ChargeTypeEnum chargeType;

  /**
   * The code that represents the frequency of charge.&lt;p&gt;See also &lt;a href&#x3D;\&quot;#chargetype-codes\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt;
   */
  @JsonAdapter(ChargeFrequencyCodeEnum.Adapter.class)
  public enum ChargeFrequencyCodeEnum {
    NUMBER_1(new BigDecimal("1")),
    
    NUMBER_2(new BigDecimal("2")),
    
    NUMBER_7(new BigDecimal("7")),
    
    NUMBER_10(new BigDecimal("10")),
    
    NUMBER_12(new BigDecimal("12")),
    
    NUMBER_17(new BigDecimal("17")),
    
    NUMBER_19(new BigDecimal("19")),
    
    NUMBER_20(new BigDecimal("20")),
    
    NUMBER_21(new BigDecimal("21")),
    
    NUMBER_25(new BigDecimal("25")),
    
    NUMBER_31(new BigDecimal("31")),
    
    NUMBER_5000(new BigDecimal("5000")),
    
    NUMBER_5001(new BigDecimal("5001")),
    
    NUMBER_5002(new BigDecimal("5002")),
    
    NUMBER_5010(new BigDecimal("5010")),
    
    NUMBER_5011(new BigDecimal("5011")),
    
    NUMBER_5012(new BigDecimal("5012")),
    
    NUMBER_5013(new BigDecimal("5013")),
    
    NUMBER_5014(new BigDecimal("5014")),
    
    NUMBER_5015(new BigDecimal("5015")),
    
    NUMBER_5016(new BigDecimal("5016")),
    
    NUMBER_5017(new BigDecimal("5017")),
    
    NUMBER_90010(new BigDecimal("90010")),
    
    NUMBER_90011(new BigDecimal("90011")),
    
    NUMBER_90012(new BigDecimal("90012")),
    
    NUMBER_90013(new BigDecimal("90013"));

    private BigDecimal value;

    ChargeFrequencyCodeEnum(BigDecimal value) {
      this.value = value;
    }

    public BigDecimal getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChargeFrequencyCodeEnum fromValue(BigDecimal value) {
      for (ChargeFrequencyCodeEnum b : ChargeFrequencyCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChargeFrequencyCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChargeFrequencyCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChargeFrequencyCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChargeFrequencyCodeEnum.fromValue(new BigDecimal(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_CHARGE_FREQUENCY_CODE = "chargeFrequencyCode";
  @SerializedName(SERIALIZED_NAME_CHARGE_FREQUENCY_CODE)
  private ChargeFrequencyCodeEnum chargeFrequencyCode;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  /**
   * Gets or Sets conditionList
   */
  @JsonAdapter(ConditionListEnum.Adapter.class)
  public enum ConditionListEnum {
    BRINGS_PET("guest_brings_pet"),
    
    DOESNT_CLEAN_BEFORE_CHECKOUT("guest_doesnt_clean_before_checkout"),
    
    SMOKES("guest_smokes");

    private String value;

    ConditionListEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConditionListEnum fromValue(String value) {
      for (ConditionListEnum b : ConditionListEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConditionListEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConditionListEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConditionListEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConditionListEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CONDITION_LIST = "conditionList";
  @SerializedName(SERIALIZED_NAME_CONDITION_LIST)
  private List<ConditionListEnum> conditionList = new ArrayList<ConditionListEnum>();

  public InlineResponse2003PropertyTaxPolicyList() { 
  }

  public InlineResponse2003PropertyTaxPolicyList typeCode(TypeCodeEnum typeCode) {
    
    this.typeCode = typeCode;
    return this;
  }

   /**
   * The code that represents the type of tax.&lt;p&gt;See also &lt;a href&#x3D;\&quot;#taxtype-codes\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt;
   * @return typeCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "36", required = true, value = "The code that represents the type of tax.<p>See also <a href=\"#taxtype-codes\">in the appendix</a>.</p>")

  public TypeCodeEnum getTypeCode() {
    return typeCode;
  }


  public void setTypeCode(TypeCodeEnum typeCode) {
    this.typeCode = typeCode;
  }


  public InlineResponse2003PropertyTaxPolicyList percent(BigDecimal percent) {
    
    this.percent = percent;
    return this;
  }

   /**
   * The charged percentage if applicable.
   * @return percent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "19", value = "The charged percentage if applicable.")

  public BigDecimal getPercent() {
    return percent;
  }


  public void setPercent(BigDecimal percent) {
    this.percent = percent;
  }


  public InlineResponse2003PropertyTaxPolicyList chargeType(ChargeTypeEnum chargeType) {
    
    this.chargeType = chargeType;
    return this;
  }

   /**
   * The type of charge.
   * @return chargeType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "included", required = true, value = "The type of charge.")

  public ChargeTypeEnum getChargeType() {
    return chargeType;
  }


  public void setChargeType(ChargeTypeEnum chargeType) {
    this.chargeType = chargeType;
  }


  public InlineResponse2003PropertyTaxPolicyList chargeFrequencyCode(ChargeFrequencyCodeEnum chargeFrequencyCode) {
    
    this.chargeFrequencyCode = chargeFrequencyCode;
    return this;
  }

   /**
   * The code that represents the frequency of charge.&lt;p&gt;See also &lt;a href&#x3D;\&quot;#chargetype-codes\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt;
   * @return chargeFrequencyCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "12", required = true, value = "The code that represents the frequency of charge.<p>See also <a href=\"#chargetype-codes\">in the appendix</a>.</p>")

  public ChargeFrequencyCodeEnum getChargeFrequencyCode() {
    return chargeFrequencyCode;
  }


  public void setChargeFrequencyCode(ChargeFrequencyCodeEnum chargeFrequencyCode) {
    this.chargeFrequencyCode = chargeFrequencyCode;
  }


  public InlineResponse2003PropertyTaxPolicyList currencyCode(String currencyCode) {
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * The currency code of the currency in that the charge is applied.&lt;p&gt;See also &lt;a href&#x3D;\&quot;#currencycodes\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt;
   * @return currencyCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "EUR", required = true, value = "The currency code of the currency in that the charge is applied.<p>See also <a href=\"#currencycodes\">in the appendix</a>.</p>")

  public String getCurrencyCode() {
    return currencyCode;
  }


  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public InlineResponse2003PropertyTaxPolicyList conditionList(List<ConditionListEnum> conditionList) {
    
    this.conditionList = conditionList;
    return this;
  }

  public InlineResponse2003PropertyTaxPolicyList addConditionListItem(ConditionListEnum conditionListItem) {
    this.conditionList.add(conditionListItem);
    return this;
  }

   /**
   * A list of conditions for the tax. Is empty if &lt;code&gt;chargeType&lt;/code&gt; is not &lt;code&gt;conditional&lt;/code&gt;.
   * @return conditionList
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "[]", required = true, value = "A list of conditions for the tax. Is empty if <code>chargeType</code> is not <code>conditional</code>.")

  public List<ConditionListEnum> getConditionList() {
    return conditionList;
  }


  public void setConditionList(List<ConditionListEnum> conditionList) {
    this.conditionList = conditionList;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2003PropertyTaxPolicyList inlineResponse2003PropertyTaxPolicyList = (InlineResponse2003PropertyTaxPolicyList) o;
    return Objects.equals(this.typeCode, inlineResponse2003PropertyTaxPolicyList.typeCode) &&
        Objects.equals(this.percent, inlineResponse2003PropertyTaxPolicyList.percent) &&
        Objects.equals(this.chargeType, inlineResponse2003PropertyTaxPolicyList.chargeType) &&
        Objects.equals(this.chargeFrequencyCode, inlineResponse2003PropertyTaxPolicyList.chargeFrequencyCode) &&
        Objects.equals(this.currencyCode, inlineResponse2003PropertyTaxPolicyList.currencyCode) &&
        Objects.equals(this.conditionList, inlineResponse2003PropertyTaxPolicyList.conditionList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(typeCode, percent, chargeType, chargeFrequencyCode, currencyCode, conditionList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2003PropertyTaxPolicyList {\n");
    sb.append("    typeCode: ").append(toIndentedString(typeCode)).append("\n");
    sb.append("    percent: ").append(toIndentedString(percent)).append("\n");
    sb.append("    chargeType: ").append(toIndentedString(chargeType)).append("\n");
    sb.append("    chargeFrequencyCode: ").append(toIndentedString(chargeFrequencyCode)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    conditionList: ").append(toIndentedString(conditionList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

