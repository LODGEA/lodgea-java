/*
 * lodgea-java
 * LODGEA SDK for java. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@lodgea.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lodgea.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.lodgea.model.AvailablePropertiesInner1GeoLocation;
import com.lodgea.model.PropertiesPropertyIdGet200ResponsePropertyPropertyInfoAcceptedPaymentListInner;
import com.lodgea.model.PropertiesPropertyIdGet200ResponsePropertyPropertyInfoMessageListInner;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.lodgea.JSON;

/**
 * General information regarding the property.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-06T17:11:31.294726198Z[Etc/UTC]")
public class PropertiesPropertyIdGet200ResponsePropertyPropertyInfo {
  public static final String SERIALIZED_NAME_UNIT_COUNT = "unitCount";
  @SerializedName(SERIALIZED_NAME_UNIT_COUNT)
  private BigDecimal unitCount;

  public static final String SERIALIZED_NAME_MESSAGE_LIST = "messageList";
  @SerializedName(SERIALIZED_NAME_MESSAGE_LIST)
  private List<PropertiesPropertyIdGet200ResponsePropertyPropertyInfoMessageListInner> messageList = new ArrayList<>();

  /**
   * A property class type code.&lt;p&gt;See also &lt;a href&#x3D;\&quot;#propertyclass-type-codes\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt;
   */
  @JsonAdapter(CategoryListEnum.Adapter.class)
  public enum CategoryListEnum {
    NUMBER_1(new BigDecimal("1")),
    
    NUMBER_2(new BigDecimal("2")),
    
    NUMBER_3(new BigDecimal("3")),
    
    NUMBER_4(new BigDecimal("4")),
    
    NUMBER_5(new BigDecimal("5")),
    
    NUMBER_6(new BigDecimal("6")),
    
    NUMBER_7(new BigDecimal("7")),
    
    NUMBER_8(new BigDecimal("8")),
    
    NUMBER_9(new BigDecimal("9")),
    
    NUMBER_10(new BigDecimal("10")),
    
    NUMBER_11(new BigDecimal("11")),
    
    NUMBER_12(new BigDecimal("12")),
    
    NUMBER_13(new BigDecimal("13")),
    
    NUMBER_14(new BigDecimal("14")),
    
    NUMBER_15(new BigDecimal("15")),
    
    NUMBER_16(new BigDecimal("16")),
    
    NUMBER_17(new BigDecimal("17")),
    
    NUMBER_18(new BigDecimal("18")),
    
    NUMBER_19(new BigDecimal("19")),
    
    NUMBER_20(new BigDecimal("20")),
    
    NUMBER_21(new BigDecimal("21")),
    
    NUMBER_22(new BigDecimal("22")),
    
    NUMBER_23(new BigDecimal("23")),
    
    NUMBER_24(new BigDecimal("24")),
    
    NUMBER_25(new BigDecimal("25")),
    
    NUMBER_26(new BigDecimal("26")),
    
    NUMBER_27(new BigDecimal("27")),
    
    NUMBER_28(new BigDecimal("28")),
    
    NUMBER_29(new BigDecimal("29")),
    
    NUMBER_30(new BigDecimal("30")),
    
    NUMBER_31(new BigDecimal("31")),
    
    NUMBER_32(new BigDecimal("32")),
    
    NUMBER_33(new BigDecimal("33")),
    
    NUMBER_34(new BigDecimal("34")),
    
    NUMBER_35(new BigDecimal("35")),
    
    NUMBER_36(new BigDecimal("36")),
    
    NUMBER_37(new BigDecimal("37")),
    
    NUMBER_38(new BigDecimal("38")),
    
    NUMBER_39(new BigDecimal("39")),
    
    NUMBER_40(new BigDecimal("40")),
    
    NUMBER_41(new BigDecimal("41")),
    
    NUMBER_42(new BigDecimal("42")),
    
    NUMBER_43(new BigDecimal("43")),
    
    NUMBER_44(new BigDecimal("44")),
    
    NUMBER_45(new BigDecimal("45")),
    
    NUMBER_46(new BigDecimal("46")),
    
    NUMBER_47(new BigDecimal("47")),
    
    NUMBER_48(new BigDecimal("48")),
    
    NUMBER_49(new BigDecimal("49")),
    
    NUMBER_50(new BigDecimal("50")),
    
    NUMBER_51(new BigDecimal("51")),
    
    NUMBER_52(new BigDecimal("52")),
    
    NUMBER_53(new BigDecimal("53")),
    
    NUMBER_54(new BigDecimal("54")),
    
    NUMBER_55(new BigDecimal("55")),
    
    NUMBER_56(new BigDecimal("56")),
    
    NUMBER_57(new BigDecimal("57")),
    
    NUMBER_58(new BigDecimal("58")),
    
    NUMBER_59(new BigDecimal("59")),
    
    NUMBER_60(new BigDecimal("60")),
    
    NUMBER_61(new BigDecimal("61")),
    
    NUMBER_62(new BigDecimal("62")),
    
    NUMBER_5000(new BigDecimal("5000")),
    
    NUMBER_5001(new BigDecimal("5001")),
    
    NUMBER_5002(new BigDecimal("5002")),
    
    NUMBER_5003(new BigDecimal("5003")),
    
    NUMBER_5004(new BigDecimal("5004")),
    
    NUMBER_5005(new BigDecimal("5005")),
    
    NUMBER_5006(new BigDecimal("5006")),
    
    NUMBER_5007(new BigDecimal("5007")),
    
    NUMBER_5008(new BigDecimal("5008")),
    
    NUMBER_5009(new BigDecimal("5009"));

    private BigDecimal value;

    CategoryListEnum(BigDecimal value) {
      this.value = value;
    }

    public BigDecimal getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryListEnum fromValue(BigDecimal value) {
      for (CategoryListEnum b : CategoryListEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryListEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryListEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryListEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryListEnum.fromValue(new BigDecimal(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY_LIST = "categoryList";
  @SerializedName(SERIALIZED_NAME_CATEGORY_LIST)
  private List<CategoryListEnum> categoryList = new ArrayList<>();

  /**
   * Gets or Sets languageList
   */
  @JsonAdapter(LanguageListEnum.Adapter.class)
  public enum LanguageListEnum {
    AF("af"),
    
    AR("ar"),
    
    AZ("az"),
    
    BE("be"),
    
    BG("bg"),
    
    CA("ca"),
    
    CS("cs"),
    
    DA("da"),
    
    DE("de"),
    
    EL("el"),
    
    EN("en"),
    
    EN_GB("en-gb"),
    
    EN_US("en-us"),
    
    ES("es"),
    
    ES_AR("es-ar"),
    
    ET("et"),
    
    FR("fr"),
    
    FI("fi"),
    
    HE("he"),
    
    HI("hi"),
    
    HR("hr"),
    
    HU("hu"),
    
    ID("id"),
    
    IS("is"),
    
    IT("it"),
    
    JA("ja"),
    
    KM("km"),
    
    KO("ko"),
    
    LO("lo"),
    
    LT("lt"),
    
    LV("lv"),
    
    MS("ms"),
    
    NL("nl"),
    
    NO("no"),
    
    PL("pl"),
    
    PT("pt"),
    
    PT_BR("pt-br"),
    
    PT_PT("pt-pt"),
    
    RO("ro"),
    
    RU("ru"),
    
    SK("sk"),
    
    SL("sl"),
    
    SR("sr"),
    
    SV("sv"),
    
    TL("tl"),
    
    TH("th"),
    
    TR("tr"),
    
    UK("uk"),
    
    VI("vi"),
    
    XA("xa"),
    
    XB("xb"),
    
    XS("xs"),
    
    XT("xt"),
    
    XU("xu"),
    
    ZH("zh"),
    
    ZH_CN("zh-cn"),
    
    ZH_TW("zh-tw");

    private String value;

    LanguageListEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LanguageListEnum fromValue(String value) {
      for (LanguageListEnum b : LanguageListEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LanguageListEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LanguageListEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LanguageListEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LanguageListEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LANGUAGE_LIST = "languageList";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_LIST)
  private List<LanguageListEnum> languageList = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private AvailablePropertiesInner1GeoLocation location;

  public static final String SERIALIZED_NAME_ACCEPTED_PAYMENT_LIST = "acceptedPaymentList";
  @SerializedName(SERIALIZED_NAME_ACCEPTED_PAYMENT_LIST)
  private List<PropertiesPropertyIdGet200ResponsePropertyPropertyInfoAcceptedPaymentListInner> acceptedPaymentList = new ArrayList<>();

  public PropertiesPropertyIdGet200ResponsePropertyPropertyInfo() {
  }

  public PropertiesPropertyIdGet200ResponsePropertyPropertyInfo unitCount(BigDecimal unitCount) {
    
    this.unitCount = unitCount;
    return this;
  }

   /**
   * The amount of units the property has.
   * @return unitCount
  **/
  @javax.annotation.Nullable

  public BigDecimal getUnitCount() {
    return unitCount;
  }


  public void setUnitCount(BigDecimal unitCount) {
    this.unitCount = unitCount;
  }


  public PropertiesPropertyIdGet200ResponsePropertyPropertyInfo messageList(List<PropertiesPropertyIdGet200ResponsePropertyPropertyInfoMessageListInner> messageList) {
    
    this.messageList = messageList;
    return this;
  }

  public PropertiesPropertyIdGet200ResponsePropertyPropertyInfo addMessageListItem(PropertiesPropertyIdGet200ResponsePropertyPropertyInfoMessageListInner messageListItem) {
    this.messageList.add(messageListItem);
    return this;
  }

   /**
   * Contains a descriptive message for this property in all supported languages.
   * @return messageList
  **/
  @javax.annotation.Nonnull

  public List<PropertiesPropertyIdGet200ResponsePropertyPropertyInfoMessageListInner> getMessageList() {
    return messageList;
  }


  public void setMessageList(List<PropertiesPropertyIdGet200ResponsePropertyPropertyInfoMessageListInner> messageList) {
    this.messageList = messageList;
  }


  public PropertiesPropertyIdGet200ResponsePropertyPropertyInfo categoryList(List<CategoryListEnum> categoryList) {
    
    this.categoryList = categoryList;
    return this;
  }

  public PropertiesPropertyIdGet200ResponsePropertyPropertyInfo addCategoryListItem(CategoryListEnum categoryListItem) {
    this.categoryList.add(categoryListItem);
    return this;
  }

   /**
   * A list of code of the property class types that apply to the property.
   * @return categoryList
  **/
  @javax.annotation.Nonnull

  public List<CategoryListEnum> getCategoryList() {
    return categoryList;
  }


  public void setCategoryList(List<CategoryListEnum> categoryList) {
    this.categoryList = categoryList;
  }


  public PropertiesPropertyIdGet200ResponsePropertyPropertyInfo languageList(List<LanguageListEnum> languageList) {
    
    this.languageList = languageList;
    return this;
  }

  public PropertiesPropertyIdGet200ResponsePropertyPropertyInfo addLanguageListItem(LanguageListEnum languageListItem) {
    this.languageList.add(languageListItem);
    return this;
  }

   /**
   * The codes of languages the staff of this property can speak. Please note that these codes partially differ from the two character ISO language codes widely used throughout the API as they partially include country specific language code.&lt;p&gt;See also &lt;a href&#x3D;\&quot;#languagecountry-code\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt;
   * @return languageList
  **/
  @javax.annotation.Nonnull

  public List<LanguageListEnum> getLanguageList() {
    return languageList;
  }


  public void setLanguageList(List<LanguageListEnum> languageList) {
    this.languageList = languageList;
  }


  public PropertiesPropertyIdGet200ResponsePropertyPropertyInfo location(AvailablePropertiesInner1GeoLocation location) {
    
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @javax.annotation.Nullable

  public AvailablePropertiesInner1GeoLocation getLocation() {
    return location;
  }


  public void setLocation(AvailablePropertiesInner1GeoLocation location) {
    this.location = location;
  }


  public PropertiesPropertyIdGet200ResponsePropertyPropertyInfo acceptedPaymentList(List<PropertiesPropertyIdGet200ResponsePropertyPropertyInfoAcceptedPaymentListInner> acceptedPaymentList) {
    
    this.acceptedPaymentList = acceptedPaymentList;
    return this;
  }

  public PropertiesPropertyIdGet200ResponsePropertyPropertyInfo addAcceptedPaymentListItem(PropertiesPropertyIdGet200ResponsePropertyPropertyInfoAcceptedPaymentListInner acceptedPaymentListItem) {
    this.acceptedPaymentList.add(acceptedPaymentListItem);
    return this;
  }

   /**
   * A list of the accepted payment methods. Payment methods might subject to frequent change as payment providers come and go. You should always implement a way to handle new, unexpected payment methods.&lt;p&gt;See also &lt;a href&#x3D;\&quot;#paymenttypes\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt;
   * @return acceptedPaymentList
  **/
  @javax.annotation.Nonnull

  public List<PropertiesPropertyIdGet200ResponsePropertyPropertyInfoAcceptedPaymentListInner> getAcceptedPaymentList() {
    return acceptedPaymentList;
  }


  public void setAcceptedPaymentList(List<PropertiesPropertyIdGet200ResponsePropertyPropertyInfoAcceptedPaymentListInner> acceptedPaymentList) {
    this.acceptedPaymentList = acceptedPaymentList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropertiesPropertyIdGet200ResponsePropertyPropertyInfo propertiesPropertyIdGet200ResponsePropertyPropertyInfo = (PropertiesPropertyIdGet200ResponsePropertyPropertyInfo) o;
    return Objects.equals(this.unitCount, propertiesPropertyIdGet200ResponsePropertyPropertyInfo.unitCount) &&
        Objects.equals(this.messageList, propertiesPropertyIdGet200ResponsePropertyPropertyInfo.messageList) &&
        Objects.equals(this.categoryList, propertiesPropertyIdGet200ResponsePropertyPropertyInfo.categoryList) &&
        Objects.equals(this.languageList, propertiesPropertyIdGet200ResponsePropertyPropertyInfo.languageList) &&
        Objects.equals(this.location, propertiesPropertyIdGet200ResponsePropertyPropertyInfo.location) &&
        Objects.equals(this.acceptedPaymentList, propertiesPropertyIdGet200ResponsePropertyPropertyInfo.acceptedPaymentList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(unitCount, messageList, categoryList, languageList, location, acceptedPaymentList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PropertiesPropertyIdGet200ResponsePropertyPropertyInfo {\n");
    sb.append("    unitCount: ").append(toIndentedString(unitCount)).append("\n");
    sb.append("    messageList: ").append(toIndentedString(messageList)).append("\n");
    sb.append("    categoryList: ").append(toIndentedString(categoryList)).append("\n");
    sb.append("    languageList: ").append(toIndentedString(languageList)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    acceptedPaymentList: ").append(toIndentedString(acceptedPaymentList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("unitCount");
    openapiFields.add("messageList");
    openapiFields.add("categoryList");
    openapiFields.add("languageList");
    openapiFields.add("location");
    openapiFields.add("acceptedPaymentList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("messageList");
    openapiRequiredFields.add("categoryList");
    openapiRequiredFields.add("languageList");
    openapiRequiredFields.add("acceptedPaymentList");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PropertiesPropertyIdGet200ResponsePropertyPropertyInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PropertiesPropertyIdGet200ResponsePropertyPropertyInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PropertiesPropertyIdGet200ResponsePropertyPropertyInfo is not found in the empty JSON string", PropertiesPropertyIdGet200ResponsePropertyPropertyInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PropertiesPropertyIdGet200ResponsePropertyPropertyInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PropertiesPropertyIdGet200ResponsePropertyPropertyInfo` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PropertiesPropertyIdGet200ResponsePropertyPropertyInfo.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("messageList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageList` to be an array in the JSON string but got `%s`", jsonObj.get("messageList").toString()));
      }

      JsonArray jsonArraymessageList = jsonObj.getAsJsonArray("messageList");
      // validate the required field `messageList` (array)
      for (int i = 0; i < jsonArraymessageList.size(); i++) {
        PropertiesPropertyIdGet200ResponsePropertyPropertyInfoMessageListInner.validateJsonObject(jsonArraymessageList.get(i).getAsJsonObject());
      };
      // ensure the required json array is present
      if (jsonObj.get("categoryList") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("categoryList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryList` to be an array in the JSON string but got `%s`", jsonObj.get("categoryList").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("languageList") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("languageList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageList` to be an array in the JSON string but got `%s`", jsonObj.get("languageList").toString()));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        AvailablePropertiesInner1GeoLocation.validateJsonObject(jsonObj.getAsJsonObject("location"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("acceptedPaymentList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `acceptedPaymentList` to be an array in the JSON string but got `%s`", jsonObj.get("acceptedPaymentList").toString()));
      }

      JsonArray jsonArrayacceptedPaymentList = jsonObj.getAsJsonArray("acceptedPaymentList");
      // validate the required field `acceptedPaymentList` (array)
      for (int i = 0; i < jsonArrayacceptedPaymentList.size(); i++) {
        PropertiesPropertyIdGet200ResponsePropertyPropertyInfoAcceptedPaymentListInner.validateJsonObject(jsonArrayacceptedPaymentList.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PropertiesPropertyIdGet200ResponsePropertyPropertyInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PropertiesPropertyIdGet200ResponsePropertyPropertyInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PropertiesPropertyIdGet200ResponsePropertyPropertyInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PropertiesPropertyIdGet200ResponsePropertyPropertyInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<PropertiesPropertyIdGet200ResponsePropertyPropertyInfo>() {
           @Override
           public void write(JsonWriter out, PropertiesPropertyIdGet200ResponsePropertyPropertyInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PropertiesPropertyIdGet200ResponsePropertyPropertyInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PropertiesPropertyIdGet200ResponsePropertyPropertyInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PropertiesPropertyIdGet200ResponsePropertyPropertyInfo
  * @throws IOException if the JSON string is invalid with respect to PropertiesPropertyIdGet200ResponsePropertyPropertyInfo
  */
  public static PropertiesPropertyIdGet200ResponsePropertyPropertyInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PropertiesPropertyIdGet200ResponsePropertyPropertyInfo.class);
  }

 /**
  * Convert an instance of PropertiesPropertyIdGet200ResponsePropertyPropertyInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

