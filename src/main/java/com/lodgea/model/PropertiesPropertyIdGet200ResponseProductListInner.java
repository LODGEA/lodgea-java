/*
 * lodgea-java
 * LODGEA SDK for Java. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@lodgea.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lodgea.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.lodgea.model.PropertiesPropertyIdGet200ResponseProductListInnerPolicyInfo;
import com.lodgea.model.PropertiesPropertyIdGet200ResponseProductListInnerRatePlanListInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.lodgea.JSON;

/**
 * A list of available products for this property.
 */
@ApiModel(description = "A list of available products for this property.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-26T16:09:38.541455406Z[Etc/UTC]")
public class PropertiesPropertyIdGet200ResponseProductListInner {
  public static final String SERIALIZED_NAME_PROPERTY_ID = "propertyId";
  @SerializedName(SERIALIZED_NAME_PROPERTY_ID)
  private String propertyId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The code of the meal plan.&lt;p&gt;See also &lt;a href&#x3D;\&quot;#mealplan-type-codes\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt;
   */
  @JsonAdapter(MealPlanListEnum.Adapter.class)
  public enum MealPlanListEnum {
    NUMBER_0(new BigDecimal("0")),
    
    NUMBER_1(new BigDecimal("1")),
    
    NUMBER_2(new BigDecimal("2")),
    
    NUMBER_3(new BigDecimal("3")),
    
    NUMBER_4(new BigDecimal("4")),
    
    NUMBER_5(new BigDecimal("5")),
    
    NUMBER_6(new BigDecimal("6")),
    
    NUMBER_7(new BigDecimal("7")),
    
    NUMBER_8(new BigDecimal("8")),
    
    NUMBER_9(new BigDecimal("9")),
    
    NUMBER_10(new BigDecimal("10")),
    
    NUMBER_11(new BigDecimal("11")),
    
    NUMBER_12(new BigDecimal("12")),
    
    NUMBER_14(new BigDecimal("14")),
    
    NUMBER_15(new BigDecimal("15")),
    
    NUMBER_16(new BigDecimal("16")),
    
    NUMBER_17(new BigDecimal("17")),
    
    NUMBER_18(new BigDecimal("18")),
    
    NUMBER_19(new BigDecimal("19")),
    
    NUMBER_20(new BigDecimal("20")),
    
    NUMBER_21(new BigDecimal("21")),
    
    NUMBER_22(new BigDecimal("22")),
    
    NUMBER_23(new BigDecimal("23")),
    
    NUMBER_24(new BigDecimal("24")),
    
    NUMBER_90001(new BigDecimal("90001"));

    private BigDecimal value;

    MealPlanListEnum(BigDecimal value) {
      this.value = value;
    }

    public BigDecimal getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MealPlanListEnum fromValue(BigDecimal value) {
      for (MealPlanListEnum b : MealPlanListEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MealPlanListEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MealPlanListEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MealPlanListEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MealPlanListEnum.fromValue(new BigDecimal(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_MEAL_PLAN_LIST = "mealPlanList";
  @SerializedName(SERIALIZED_NAME_MEAL_PLAN_LIST)
  private List<MealPlanListEnum> mealPlanList = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROOM_TYPE_LIST = "roomTypeList";
  @SerializedName(SERIALIZED_NAME_ROOM_TYPE_LIST)
  private List<String> roomTypeList = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_L_O_S_PRICING = "isLOSPricing";
  @SerializedName(SERIALIZED_NAME_IS_L_O_S_PRICING)
  private Boolean isLOSPricing;

  public static final String SERIALIZED_NAME_IS_O_B_P_PRICING = "isOBPPricing";
  @SerializedName(SERIALIZED_NAME_IS_O_B_P_PRICING)
  private Boolean isOBPPricing;

  public static final String SERIALIZED_NAME_RATE_PLAN_LIST = "ratePlanList";
  @SerializedName(SERIALIZED_NAME_RATE_PLAN_LIST)
  private List<PropertiesPropertyIdGet200ResponseProductListInnerRatePlanListInner> ratePlanList = new ArrayList<>();

  public static final String SERIALIZED_NAME_POLICY_INFO = "policyInfo";
  @SerializedName(SERIALIZED_NAME_POLICY_INFO)
  private PropertiesPropertyIdGet200ResponseProductListInnerPolicyInfo policyInfo;

  public PropertiesPropertyIdGet200ResponseProductListInner() { 
  }

  public PropertiesPropertyIdGet200ResponseProductListInner propertyId(String propertyId) {
    
    this.propertyId = propertyId;
    return this;
  }

   /**
   * The ID of the property.
   * @return propertyId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "strandresidenz-sylt", required = true, value = "The ID of the property.")

  public String getPropertyId() {
    return propertyId;
  }


  public void setPropertyId(String propertyId) {
    this.propertyId = propertyId;
  }


  public PropertiesPropertyIdGet200ResponseProductListInner name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the product.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Standard Amrum", required = true, value = "The name of the product.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public PropertiesPropertyIdGet200ResponseProductListInner mealPlanList(List<MealPlanListEnum> mealPlanList) {
    
    this.mealPlanList = mealPlanList;
    return this;
  }

  public PropertiesPropertyIdGet200ResponseProductListInner addMealPlanListItem(MealPlanListEnum mealPlanListItem) {
    this.mealPlanList.add(mealPlanListItem);
    return this;
  }

   /**
   * A list of meal type codes included in this product.
   * @return mealPlanList
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A list of meal type codes included in this product.")

  public List<MealPlanListEnum> getMealPlanList() {
    return mealPlanList;
  }


  public void setMealPlanList(List<MealPlanListEnum> mealPlanList) {
    this.mealPlanList = mealPlanList;
  }


  public PropertiesPropertyIdGet200ResponseProductListInner roomTypeList(List<String> roomTypeList) {
    
    this.roomTypeList = roomTypeList;
    return this;
  }

  public PropertiesPropertyIdGet200ResponseProductListInner addRoomTypeListItem(String roomTypeListItem) {
    this.roomTypeList.add(roomTypeListItem);
    return this;
  }

   /**
   * An array of strings describing the room types included in this product.
   * @return roomTypeList
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An array of strings describing the room types included in this product.")

  public List<String> getRoomTypeList() {
    return roomTypeList;
  }


  public void setRoomTypeList(List<String> roomTypeList) {
    this.roomTypeList = roomTypeList;
  }


  public PropertiesPropertyIdGet200ResponseProductListInner isLOSPricing(Boolean isLOSPricing) {
    
    this.isLOSPricing = isLOSPricing;
    return this;
  }

   /**
   * Whether this product is length of stay pricing.
   * @return isLOSPricing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether this product is length of stay pricing.")

  public Boolean getIsLOSPricing() {
    return isLOSPricing;
  }


  public void setIsLOSPricing(Boolean isLOSPricing) {
    this.isLOSPricing = isLOSPricing;
  }


  public PropertiesPropertyIdGet200ResponseProductListInner isOBPPricing(Boolean isOBPPricing) {
    
    this.isOBPPricing = isOBPPricing;
    return this;
  }

   /**
   * Whether this product is occupancy based pricing.
   * @return isOBPPricing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether this product is occupancy based pricing.")

  public Boolean getIsOBPPricing() {
    return isOBPPricing;
  }


  public void setIsOBPPricing(Boolean isOBPPricing) {
    this.isOBPPricing = isOBPPricing;
  }


  public PropertiesPropertyIdGet200ResponseProductListInner ratePlanList(List<PropertiesPropertyIdGet200ResponseProductListInnerRatePlanListInner> ratePlanList) {
    
    this.ratePlanList = ratePlanList;
    return this;
  }

  public PropertiesPropertyIdGet200ResponseProductListInner addRatePlanListItem(PropertiesPropertyIdGet200ResponseProductListInnerRatePlanListInner ratePlanListItem) {
    this.ratePlanList.add(ratePlanListItem);
    return this;
  }

   /**
   * The rate plans for this product.
   * @return ratePlanList
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The rate plans for this product.")

  public List<PropertiesPropertyIdGet200ResponseProductListInnerRatePlanListInner> getRatePlanList() {
    return ratePlanList;
  }


  public void setRatePlanList(List<PropertiesPropertyIdGet200ResponseProductListInnerRatePlanListInner> ratePlanList) {
    this.ratePlanList = ratePlanList;
  }


  public PropertiesPropertyIdGet200ResponseProductListInner policyInfo(PropertiesPropertyIdGet200ResponseProductListInnerPolicyInfo policyInfo) {
    
    this.policyInfo = policyInfo;
    return this;
  }

   /**
   * Get policyInfo
   * @return policyInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PropertiesPropertyIdGet200ResponseProductListInnerPolicyInfo getPolicyInfo() {
    return policyInfo;
  }


  public void setPolicyInfo(PropertiesPropertyIdGet200ResponseProductListInnerPolicyInfo policyInfo) {
    this.policyInfo = policyInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropertiesPropertyIdGet200ResponseProductListInner propertiesPropertyIdGet200ResponseProductListInner = (PropertiesPropertyIdGet200ResponseProductListInner) o;
    return Objects.equals(this.propertyId, propertiesPropertyIdGet200ResponseProductListInner.propertyId) &&
        Objects.equals(this.name, propertiesPropertyIdGet200ResponseProductListInner.name) &&
        Objects.equals(this.mealPlanList, propertiesPropertyIdGet200ResponseProductListInner.mealPlanList) &&
        Objects.equals(this.roomTypeList, propertiesPropertyIdGet200ResponseProductListInner.roomTypeList) &&
        Objects.equals(this.isLOSPricing, propertiesPropertyIdGet200ResponseProductListInner.isLOSPricing) &&
        Objects.equals(this.isOBPPricing, propertiesPropertyIdGet200ResponseProductListInner.isOBPPricing) &&
        Objects.equals(this.ratePlanList, propertiesPropertyIdGet200ResponseProductListInner.ratePlanList) &&
        Objects.equals(this.policyInfo, propertiesPropertyIdGet200ResponseProductListInner.policyInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(propertyId, name, mealPlanList, roomTypeList, isLOSPricing, isOBPPricing, ratePlanList, policyInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PropertiesPropertyIdGet200ResponseProductListInner {\n");
    sb.append("    propertyId: ").append(toIndentedString(propertyId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    mealPlanList: ").append(toIndentedString(mealPlanList)).append("\n");
    sb.append("    roomTypeList: ").append(toIndentedString(roomTypeList)).append("\n");
    sb.append("    isLOSPricing: ").append(toIndentedString(isLOSPricing)).append("\n");
    sb.append("    isOBPPricing: ").append(toIndentedString(isOBPPricing)).append("\n");
    sb.append("    ratePlanList: ").append(toIndentedString(ratePlanList)).append("\n");
    sb.append("    policyInfo: ").append(toIndentedString(policyInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("propertyId");
    openapiFields.add("name");
    openapiFields.add("mealPlanList");
    openapiFields.add("roomTypeList");
    openapiFields.add("isLOSPricing");
    openapiFields.add("isOBPPricing");
    openapiFields.add("ratePlanList");
    openapiFields.add("policyInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("propertyId");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("mealPlanList");
    openapiRequiredFields.add("roomTypeList");
    openapiRequiredFields.add("ratePlanList");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PropertiesPropertyIdGet200ResponseProductListInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (PropertiesPropertyIdGet200ResponseProductListInner.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in PropertiesPropertyIdGet200ResponseProductListInner is not found in the empty JSON string", PropertiesPropertyIdGet200ResponseProductListInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PropertiesPropertyIdGet200ResponseProductListInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PropertiesPropertyIdGet200ResponseProductListInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PropertiesPropertyIdGet200ResponseProductListInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("propertyId") != null && !jsonObj.get("propertyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `propertyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("propertyId").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("mealPlanList") != null && !jsonObj.get("mealPlanList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mealPlanList` to be an array in the JSON string but got `%s`", jsonObj.get("mealPlanList").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("roomTypeList") != null && !jsonObj.get("roomTypeList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `roomTypeList` to be an array in the JSON string but got `%s`", jsonObj.get("roomTypeList").toString()));
      }
      JsonArray jsonArrayratePlanList = jsonObj.getAsJsonArray("ratePlanList");
      if (jsonArrayratePlanList != null) {
        // ensure the json data is an array
        if (!jsonObj.get("ratePlanList").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `ratePlanList` to be an array in the JSON string but got `%s`", jsonObj.get("ratePlanList").toString()));
        }

        // validate the optional field `ratePlanList` (array)
        for (int i = 0; i < jsonArrayratePlanList.size(); i++) {
          PropertiesPropertyIdGet200ResponseProductListInnerRatePlanListInner.validateJsonObject(jsonArrayratePlanList.get(i).getAsJsonObject());
        };
      }
      // validate the optional field `policyInfo`
      if (jsonObj.getAsJsonObject("policyInfo") != null) {
        PropertiesPropertyIdGet200ResponseProductListInnerPolicyInfo.validateJsonObject(jsonObj.getAsJsonObject("policyInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PropertiesPropertyIdGet200ResponseProductListInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PropertiesPropertyIdGet200ResponseProductListInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PropertiesPropertyIdGet200ResponseProductListInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PropertiesPropertyIdGet200ResponseProductListInner.class));

       return (TypeAdapter<T>) new TypeAdapter<PropertiesPropertyIdGet200ResponseProductListInner>() {
           @Override
           public void write(JsonWriter out, PropertiesPropertyIdGet200ResponseProductListInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PropertiesPropertyIdGet200ResponseProductListInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PropertiesPropertyIdGet200ResponseProductListInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PropertiesPropertyIdGet200ResponseProductListInner
  * @throws IOException if the JSON string is invalid with respect to PropertiesPropertyIdGet200ResponseProductListInner
  */
  public static PropertiesPropertyIdGet200ResponseProductListInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PropertiesPropertyIdGet200ResponseProductListInner.class);
  }

 /**
  * Convert an instance of PropertiesPropertyIdGet200ResponseProductListInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

