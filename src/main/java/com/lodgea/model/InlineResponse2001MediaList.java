/*
 * lodgea-java
 * LODGEA SDK for java. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@lodgea.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lodgea.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * InlineResponse2001MediaList
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-07T12:22:24.387616647Z[Etc/UTC]")
public class InlineResponse2001MediaList {
  /**
   * Gets or Sets tagList
   */
  @JsonAdapter(TagListEnum.Adapter.class)
  public enum TagListEnum {
    NUMBER_1(new BigDecimal("1")),
    
    NUMBER_2(new BigDecimal("2")),
    
    NUMBER_3(new BigDecimal("3")),
    
    NUMBER_4(new BigDecimal("4")),
    
    NUMBER_5(new BigDecimal("5")),
    
    NUMBER_6(new BigDecimal("6")),
    
    NUMBER_7(new BigDecimal("7")),
    
    NUMBER_8(new BigDecimal("8")),
    
    NUMBER_10(new BigDecimal("10")),
    
    NUMBER_11(new BigDecimal("11")),
    
    NUMBER_13(new BigDecimal("13")),
    
    NUMBER_14(new BigDecimal("14")),
    
    NUMBER_37(new BigDecimal("37")),
    
    NUMBER_41(new BigDecimal("41")),
    
    NUMBER_42(new BigDecimal("42")),
    
    NUMBER_43(new BigDecimal("43")),
    
    NUMBER_50(new BigDecimal("50")),
    
    NUMBER_55(new BigDecimal("55")),
    
    NUMBER_61(new BigDecimal("61")),
    
    NUMBER_70(new BigDecimal("70")),
    
    NUMBER_74(new BigDecimal("74")),
    
    NUMBER_81(new BigDecimal("81")),
    
    NUMBER_82(new BigDecimal("82")),
    
    NUMBER_87(new BigDecimal("87")),
    
    NUMBER_89(new BigDecimal("89")),
    
    NUMBER_90(new BigDecimal("90")),
    
    NUMBER_94(new BigDecimal("94")),
    
    NUMBER_95(new BigDecimal("95")),
    
    NUMBER_96(new BigDecimal("96")),
    
    NUMBER_97(new BigDecimal("97")),
    
    NUMBER_100(new BigDecimal("100")),
    
    NUMBER_102(new BigDecimal("102")),
    
    NUMBER_103(new BigDecimal("103")),
    
    NUMBER_104(new BigDecimal("104")),
    
    NUMBER_106(new BigDecimal("106")),
    
    NUMBER_107(new BigDecimal("107")),
    
    NUMBER_108(new BigDecimal("108")),
    
    NUMBER_112(new BigDecimal("112")),
    
    NUMBER_113(new BigDecimal("113")),
    
    NUMBER_114(new BigDecimal("114")),
    
    NUMBER_115(new BigDecimal("115")),
    
    NUMBER_116(new BigDecimal("116")),
    
    NUMBER_124(new BigDecimal("124")),
    
    NUMBER_125(new BigDecimal("125")),
    
    NUMBER_128(new BigDecimal("128")),
    
    NUMBER_131(new BigDecimal("131")),
    
    NUMBER_133(new BigDecimal("133")),
    
    NUMBER_134(new BigDecimal("134")),
    
    NUMBER_137(new BigDecimal("137")),
    
    NUMBER_141(new BigDecimal("141")),
    
    NUMBER_143(new BigDecimal("143")),
    
    NUMBER_153(new BigDecimal("153")),
    
    NUMBER_154(new BigDecimal("154")),
    
    NUMBER_155(new BigDecimal("155")),
    
    NUMBER_156(new BigDecimal("156")),
    
    NUMBER_157(new BigDecimal("157")),
    
    NUMBER_158(new BigDecimal("158")),
    
    NUMBER_159(new BigDecimal("159")),
    
    NUMBER_160(new BigDecimal("160")),
    
    NUMBER_161(new BigDecimal("161")),
    
    NUMBER_164(new BigDecimal("164")),
    
    NUMBER_165(new BigDecimal("165")),
    
    NUMBER_167(new BigDecimal("167")),
    
    NUMBER_172(new BigDecimal("172")),
    
    NUMBER_173(new BigDecimal("173")),
    
    NUMBER_177(new BigDecimal("177")),
    
    NUMBER_178(new BigDecimal("178")),
    
    NUMBER_179(new BigDecimal("179")),
    
    NUMBER_182(new BigDecimal("182")),
    
    NUMBER_183(new BigDecimal("183")),
    
    NUMBER_184(new BigDecimal("184")),
    
    NUMBER_185(new BigDecimal("185")),
    
    NUMBER_186(new BigDecimal("186")),
    
    NUMBER_187(new BigDecimal("187")),
    
    NUMBER_188(new BigDecimal("188")),
    
    NUMBER_189(new BigDecimal("189")),
    
    NUMBER_190(new BigDecimal("190")),
    
    NUMBER_191(new BigDecimal("191")),
    
    NUMBER_192(new BigDecimal("192")),
    
    NUMBER_193(new BigDecimal("193")),
    
    NUMBER_194(new BigDecimal("194")),
    
    NUMBER_197(new BigDecimal("197")),
    
    NUMBER_198(new BigDecimal("198")),
    
    NUMBER_199(new BigDecimal("199")),
    
    NUMBER_204(new BigDecimal("204")),
    
    NUMBER_205(new BigDecimal("205")),
    
    NUMBER_240(new BigDecimal("240")),
    
    NUMBER_241(new BigDecimal("241")),
    
    NUMBER_242(new BigDecimal("242")),
    
    NUMBER_245(new BigDecimal("245")),
    
    NUMBER_246(new BigDecimal("246")),
    
    NUMBER_247(new BigDecimal("247")),
    
    NUMBER_248(new BigDecimal("248")),
    
    NUMBER_249(new BigDecimal("249")),
    
    NUMBER_250(new BigDecimal("250")),
    
    NUMBER_251(new BigDecimal("251")),
    
    NUMBER_252(new BigDecimal("252")),
    
    NUMBER_253(new BigDecimal("253")),
    
    NUMBER_254(new BigDecimal("254")),
    
    NUMBER_255(new BigDecimal("255")),
    
    NUMBER_256(new BigDecimal("256")),
    
    NUMBER_257(new BigDecimal("257")),
    
    NUMBER_258(new BigDecimal("258")),
    
    NUMBER_259(new BigDecimal("259")),
    
    NUMBER_260(new BigDecimal("260")),
    
    NUMBER_261(new BigDecimal("261")),
    
    NUMBER_262(new BigDecimal("262")),
    
    NUMBER_263(new BigDecimal("263")),
    
    NUMBER_264(new BigDecimal("264")),
    
    NUMBER_265(new BigDecimal("265")),
    
    NUMBER_266(new BigDecimal("266")),
    
    NUMBER_267(new BigDecimal("267")),
    
    NUMBER_268(new BigDecimal("268")),
    
    NUMBER_269(new BigDecimal("269")),
    
    NUMBER_270(new BigDecimal("270")),
    
    NUMBER_271(new BigDecimal("271")),
    
    NUMBER_272(new BigDecimal("272")),
    
    NUMBER_273(new BigDecimal("273")),
    
    NUMBER_276(new BigDecimal("276")),
    
    NUMBER_277(new BigDecimal("277")),
    
    NUMBER_278(new BigDecimal("278")),
    
    NUMBER_279(new BigDecimal("279")),
    
    NUMBER_280(new BigDecimal("280")),
    
    NUMBER_281(new BigDecimal("281")),
    
    NUMBER_282(new BigDecimal("282")),
    
    NUMBER_283(new BigDecimal("283")),
    
    NUMBER_284(new BigDecimal("284")),
    
    NUMBER_285(new BigDecimal("285")),
    
    NUMBER_286(new BigDecimal("286")),
    
    NUMBER_287(new BigDecimal("287")),
    
    NUMBER_289(new BigDecimal("289")),
    
    NUMBER_290(new BigDecimal("290")),
    
    NUMBER_291(new BigDecimal("291"));

    private BigDecimal value;

    TagListEnum(BigDecimal value) {
      this.value = value;
    }

    public BigDecimal getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TagListEnum fromValue(BigDecimal value) {
      for (TagListEnum b : TagListEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TagListEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TagListEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TagListEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TagListEnum.fromValue(new BigDecimal(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_TAG_LIST = "tagList";
  @SerializedName(SERIALIZED_NAME_TAG_LIST)
  private List<TagListEnum> tagList = new ArrayList<TagListEnum>();

  public static final String SERIALIZED_NAME_IS_MAIN_IMAGE = "isMainImage";
  @SerializedName(SERIALIZED_NAME_IS_MAIN_IMAGE)
  private Boolean isMainImage;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_SORT_ORDER = "sortOrder";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  private BigDecimal sortOrder;

  public InlineResponse2001MediaList() { 
  }

  public InlineResponse2001MediaList tagList(List<TagListEnum> tagList) {
    
    this.tagList = tagList;
    return this;
  }

  public InlineResponse2001MediaList addTagListItem(TagListEnum tagListItem) {
    this.tagList.add(tagListItem);
    return this;
  }

   /**
   * A list of tag codes for the media.&lt;p&gt;See also &lt;a href&#x3D;\&quot;#imagetype-codes\&quot;&gt;in the appendix&lt;/a&gt;.&lt;/p&gt;
   * @return tagList
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "[3,55]", required = true, value = "A list of tag codes for the media.<p>See also <a href=\"#imagetype-codes\">in the appendix</a>.</p>")

  public List<TagListEnum> getTagList() {
    return tagList;
  }


  public void setTagList(List<TagListEnum> tagList) {
    this.tagList = tagList;
  }


  public InlineResponse2001MediaList isMainImage(Boolean isMainImage) {
    
    this.isMainImage = isMainImage;
    return this;
  }

   /**
   * Whether the media is the main image for the property.
   * @return isMainImage
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether the media is the main image for the property.")

  public Boolean getIsMainImage() {
    return isMainImage;
  }


  public void setIsMainImage(Boolean isMainImage) {
    this.isMainImage = isMainImage;
  }


  public InlineResponse2001MediaList url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * The URL for the media.
   * @return url
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "5e3d9d49e9480.jpg", required = true, value = "The URL for the media.")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public InlineResponse2001MediaList sortOrder(BigDecimal sortOrder) {
    
    this.sortOrder = sortOrder;
    return this;
  }

   /**
   * The sort order for the media.
   * @return sortOrder
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1000", required = true, value = "The sort order for the media.")

  public BigDecimal getSortOrder() {
    return sortOrder;
  }


  public void setSortOrder(BigDecimal sortOrder) {
    this.sortOrder = sortOrder;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2001MediaList inlineResponse2001MediaList = (InlineResponse2001MediaList) o;
    return Objects.equals(this.tagList, inlineResponse2001MediaList.tagList) &&
        Objects.equals(this.isMainImage, inlineResponse2001MediaList.isMainImage) &&
        Objects.equals(this.url, inlineResponse2001MediaList.url) &&
        Objects.equals(this.sortOrder, inlineResponse2001MediaList.sortOrder);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tagList, isMainImage, url, sortOrder);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2001MediaList {\n");
    sb.append("    tagList: ").append(toIndentedString(tagList)).append("\n");
    sb.append("    isMainImage: ").append(toIndentedString(isMainImage)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

