/*
 * lodgea-java
 * LODGEA SDK for java. Check out https://docs.lodgea.io for more information.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@lodgea.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lodgea.controllers;

import com.lodgea.ApiCallback;
import com.lodgea.ApiClient;
import com.lodgea.ApiException;
import com.lodgea.ApiResponse;
import com.lodgea.Configuration;
import com.lodgea.Pair;
import com.lodgea.ProgressRequestBody;
import com.lodgea.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.lodgea.model.AvailabilitySearchPost200Response;
import com.lodgea.model.AvailabilitySearchPostRequest;
import com.lodgea.model.LocationSearchPost200Response;
import com.lodgea.model.LocationSearchPost400Response;
import com.lodgea.model.LocationSearchPostRequest;
import com.lodgea.model.PropertiesGet200Response;
import com.lodgea.model.PropertiesPropertyIdAvailabilityGet200Response;
import com.lodgea.model.PropertiesPropertyIdGet200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for availabilitySearchPost
     * @param availabilitySearchPostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful, a list of available properties matching the given criteria is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We validate all calls to our API in a strict manner using Zod. In case of any validation errors, we send back a 400 response with a list of all validation errors. For more info see https://github.com/colinhacks/zod/blob/master/ERROR_HANDLING.md. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized, the api key in the \&quot;apiKey\&quot; header field is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call availabilitySearchPostCall(AvailabilitySearchPostRequest availabilitySearchPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = availabilitySearchPostRequest;

        // create path and map variables
        String localVarPath = "/availability/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call availabilitySearchPostValidateBeforeCall(AvailabilitySearchPostRequest availabilitySearchPostRequest, final ApiCallback _callback) throws ApiException {
        return availabilitySearchPostCall(availabilitySearchPostRequest, _callback);

    }

    /**
     * Search for availability
     * Get availability information based on search criteria.
     * @param availabilitySearchPostRequest  (optional)
     * @return AvailabilitySearchPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful, a list of available properties matching the given criteria is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We validate all calls to our API in a strict manner using Zod. In case of any validation errors, we send back a 400 response with a list of all validation errors. For more info see https://github.com/colinhacks/zod/blob/master/ERROR_HANDLING.md. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized, the api key in the \&quot;apiKey\&quot; header field is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public AvailabilitySearchPost200Response availabilitySearchPost(AvailabilitySearchPostRequest availabilitySearchPostRequest) throws ApiException {
        ApiResponse<AvailabilitySearchPost200Response> localVarResp = availabilitySearchPostWithHttpInfo(availabilitySearchPostRequest);
        return localVarResp.getData();
    }

    /**
     * Search for availability
     * Get availability information based on search criteria.
     * @param availabilitySearchPostRequest  (optional)
     * @return ApiResponse&lt;AvailabilitySearchPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful, a list of available properties matching the given criteria is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We validate all calls to our API in a strict manner using Zod. In case of any validation errors, we send back a 400 response with a list of all validation errors. For more info see https://github.com/colinhacks/zod/blob/master/ERROR_HANDLING.md. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized, the api key in the \&quot;apiKey\&quot; header field is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AvailabilitySearchPost200Response> availabilitySearchPostWithHttpInfo(AvailabilitySearchPostRequest availabilitySearchPostRequest) throws ApiException {
        okhttp3.Call localVarCall = availabilitySearchPostValidateBeforeCall(availabilitySearchPostRequest, null);
        Type localVarReturnType = new TypeToken<AvailabilitySearchPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for availability (asynchronously)
     * Get availability information based on search criteria.
     * @param availabilitySearchPostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful, a list of available properties matching the given criteria is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We validate all calls to our API in a strict manner using Zod. In case of any validation errors, we send back a 400 response with a list of all validation errors. For more info see https://github.com/colinhacks/zod/blob/master/ERROR_HANDLING.md. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized, the api key in the \&quot;apiKey\&quot; header field is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call availabilitySearchPostAsync(AvailabilitySearchPostRequest availabilitySearchPostRequest, final ApiCallback<AvailabilitySearchPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = availabilitySearchPostValidateBeforeCall(availabilitySearchPostRequest, _callback);
        Type localVarReturnType = new TypeToken<AvailabilitySearchPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for locationSearchPost
     * @param locationSearchPostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful, a list of locations matching the given location search text is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We validate all calls to our API in a strict manner using Zod. In case of any validation errors, we send back a 400 response with a list of all validation errors. For more info see https://github.com/colinhacks/zod/blob/master/ERROR_HANDLING.md. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized, the api key in the \&quot;apiKey\&quot; header field is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationSearchPostCall(LocationSearchPostRequest locationSearchPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = locationSearchPostRequest;

        // create path and map variables
        String localVarPath = "/location/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call locationSearchPostValidateBeforeCall(LocationSearchPostRequest locationSearchPostRequest, final ApiCallback _callback) throws ApiException {
        return locationSearchPostCall(locationSearchPostRequest, _callback);

    }

    /**
     * Search for location
     * Get a list of locations and their lowest available rate related to a given keyword.
     * @param locationSearchPostRequest  (optional)
     * @return LocationSearchPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful, a list of locations matching the given location search text is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We validate all calls to our API in a strict manner using Zod. In case of any validation errors, we send back a 400 response with a list of all validation errors. For more info see https://github.com/colinhacks/zod/blob/master/ERROR_HANDLING.md. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized, the api key in the \&quot;apiKey\&quot; header field is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public LocationSearchPost200Response locationSearchPost(LocationSearchPostRequest locationSearchPostRequest) throws ApiException {
        ApiResponse<LocationSearchPost200Response> localVarResp = locationSearchPostWithHttpInfo(locationSearchPostRequest);
        return localVarResp.getData();
    }

    /**
     * Search for location
     * Get a list of locations and their lowest available rate related to a given keyword.
     * @param locationSearchPostRequest  (optional)
     * @return ApiResponse&lt;LocationSearchPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful, a list of locations matching the given location search text is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We validate all calls to our API in a strict manner using Zod. In case of any validation errors, we send back a 400 response with a list of all validation errors. For more info see https://github.com/colinhacks/zod/blob/master/ERROR_HANDLING.md. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized, the api key in the \&quot;apiKey\&quot; header field is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocationSearchPost200Response> locationSearchPostWithHttpInfo(LocationSearchPostRequest locationSearchPostRequest) throws ApiException {
        okhttp3.Call localVarCall = locationSearchPostValidateBeforeCall(locationSearchPostRequest, null);
        Type localVarReturnType = new TypeToken<LocationSearchPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for location (asynchronously)
     * Get a list of locations and their lowest available rate related to a given keyword.
     * @param locationSearchPostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful, a list of locations matching the given location search text is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We validate all calls to our API in a strict manner using Zod. In case of any validation errors, we send back a 400 response with a list of all validation errors. For more info see https://github.com/colinhacks/zod/blob/master/ERROR_HANDLING.md. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized, the api key in the \&quot;apiKey\&quot; header field is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationSearchPostAsync(LocationSearchPostRequest locationSearchPostRequest, final ApiCallback<LocationSearchPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = locationSearchPostValidateBeforeCall(locationSearchPostRequest, _callback);
        Type localVarReturnType = new TypeToken<LocationSearchPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertiesGet
     * @param keyword  (optional)
     * @param pageToken  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful, a list of properties matching the given keyword is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We validate all calls to our API in a strict manner using Zod. In case of any validation errors, we send back a 400 response with a list of all validation errors. For more info see https://github.com/colinhacks/zod/blob/master/ERROR_HANDLING.md. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized, the api key in the \&quot;apiKey\&quot; header field is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertiesGetCall(String keyword, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/properties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertiesGetValidateBeforeCall(String keyword, String pageToken, final ApiCallback _callback) throws ApiException {
        return propertiesGetCall(keyword, pageToken, _callback);

    }

    /**
     * List (filtered) properties
     * List properties, optionally filtered by a keyword.
     * @param keyword  (optional)
     * @param pageToken  (optional)
     * @return PropertiesGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful, a list of properties matching the given keyword is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We validate all calls to our API in a strict manner using Zod. In case of any validation errors, we send back a 400 response with a list of all validation errors. For more info see https://github.com/colinhacks/zod/blob/master/ERROR_HANDLING.md. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized, the api key in the \&quot;apiKey\&quot; header field is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public PropertiesGet200Response propertiesGet(String keyword, String pageToken) throws ApiException {
        ApiResponse<PropertiesGet200Response> localVarResp = propertiesGetWithHttpInfo(keyword, pageToken);
        return localVarResp.getData();
    }

    /**
     * List (filtered) properties
     * List properties, optionally filtered by a keyword.
     * @param keyword  (optional)
     * @param pageToken  (optional)
     * @return ApiResponse&lt;PropertiesGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful, a list of properties matching the given keyword is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We validate all calls to our API in a strict manner using Zod. In case of any validation errors, we send back a 400 response with a list of all validation errors. For more info see https://github.com/colinhacks/zod/blob/master/ERROR_HANDLING.md. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized, the api key in the \&quot;apiKey\&quot; header field is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PropertiesGet200Response> propertiesGetWithHttpInfo(String keyword, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = propertiesGetValidateBeforeCall(keyword, pageToken, null);
        Type localVarReturnType = new TypeToken<PropertiesGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List (filtered) properties (asynchronously)
     * List properties, optionally filtered by a keyword.
     * @param keyword  (optional)
     * @param pageToken  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful, a list of properties matching the given keyword is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We validate all calls to our API in a strict manner using Zod. In case of any validation errors, we send back a 400 response with a list of all validation errors. For more info see https://github.com/colinhacks/zod/blob/master/ERROR_HANDLING.md. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized, the api key in the \&quot;apiKey\&quot; header field is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertiesGetAsync(String keyword, String pageToken, final ApiCallback<PropertiesGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertiesGetValidateBeforeCall(keyword, pageToken, _callback);
        Type localVarReturnType = new TypeToken<PropertiesGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertiesPropertyIdAvailabilityGet
     * @param propertyId  (required)
     * @param currencyCode  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful, a list of properties matching the given keyword is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We validate all calls to our API in a strict manner using Zod. In case of any validation errors, we send back a 400 response with a list of all validation errors. For more info see https://github.com/colinhacks/zod/blob/master/ERROR_HANDLING.md. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized, the api key in the \&quot;apiKey\&quot; header field is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertiesPropertyIdAvailabilityGetCall(String propertyId, String currencyCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/properties/{propertyId}/availability"
            .replace("{" + "propertyId" + "}", localVarApiClient.escapeString(propertyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currencyCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currencyCode", currencyCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertiesPropertyIdAvailabilityGetValidateBeforeCall(String propertyId, String currencyCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyId' is set
        if (propertyId == null) {
            throw new ApiException("Missing the required parameter 'propertyId' when calling propertiesPropertyIdAvailabilityGet(Async)");
        }

        // verify the required parameter 'currencyCode' is set
        if (currencyCode == null) {
            throw new ApiException("Missing the required parameter 'currencyCode' when calling propertiesPropertyIdAvailabilityGet(Async)");
        }

        return propertiesPropertyIdAvailabilityGetCall(propertyId, currencyCode, _callback);

    }

    /**
     * Get a properties availability
     * Get detailed availability information for a specific property.
     * @param propertyId  (required)
     * @param currencyCode  (required)
     * @return PropertiesPropertyIdAvailabilityGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful, a list of properties matching the given keyword is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We validate all calls to our API in a strict manner using Zod. In case of any validation errors, we send back a 400 response with a list of all validation errors. For more info see https://github.com/colinhacks/zod/blob/master/ERROR_HANDLING.md. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized, the api key in the \&quot;apiKey\&quot; header field is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public PropertiesPropertyIdAvailabilityGet200Response propertiesPropertyIdAvailabilityGet(String propertyId, String currencyCode) throws ApiException {
        ApiResponse<PropertiesPropertyIdAvailabilityGet200Response> localVarResp = propertiesPropertyIdAvailabilityGetWithHttpInfo(propertyId, currencyCode);
        return localVarResp.getData();
    }

    /**
     * Get a properties availability
     * Get detailed availability information for a specific property.
     * @param propertyId  (required)
     * @param currencyCode  (required)
     * @return ApiResponse&lt;PropertiesPropertyIdAvailabilityGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful, a list of properties matching the given keyword is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We validate all calls to our API in a strict manner using Zod. In case of any validation errors, we send back a 400 response with a list of all validation errors. For more info see https://github.com/colinhacks/zod/blob/master/ERROR_HANDLING.md. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized, the api key in the \&quot;apiKey\&quot; header field is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PropertiesPropertyIdAvailabilityGet200Response> propertiesPropertyIdAvailabilityGetWithHttpInfo(String propertyId, String currencyCode) throws ApiException {
        okhttp3.Call localVarCall = propertiesPropertyIdAvailabilityGetValidateBeforeCall(propertyId, currencyCode, null);
        Type localVarReturnType = new TypeToken<PropertiesPropertyIdAvailabilityGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a properties availability (asynchronously)
     * Get detailed availability information for a specific property.
     * @param propertyId  (required)
     * @param currencyCode  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful, a list of properties matching the given keyword is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We validate all calls to our API in a strict manner using Zod. In case of any validation errors, we send back a 400 response with a list of all validation errors. For more info see https://github.com/colinhacks/zod/blob/master/ERROR_HANDLING.md. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized, the api key in the \&quot;apiKey\&quot; header field is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertiesPropertyIdAvailabilityGetAsync(String propertyId, String currencyCode, final ApiCallback<PropertiesPropertyIdAvailabilityGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertiesPropertyIdAvailabilityGetValidateBeforeCall(propertyId, currencyCode, _callback);
        Type localVarReturnType = new TypeToken<PropertiesPropertyIdAvailabilityGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertiesPropertyIdGet
     * @param propertyId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful, property found, the whole property object is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We validate all calls to our API in a strict manner using Zod. In case of any validation errors, we send back a 400 response with a list of all validation errors. For more info see https://github.com/colinhacks/zod/blob/master/ERROR_HANDLING.md. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized, the api key in the \&quot;apiKey\&quot; header field is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertiesPropertyIdGetCall(String propertyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/properties/{propertyId}"
            .replace("{" + "propertyId" + "}", localVarApiClient.escapeString(propertyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertiesPropertyIdGetValidateBeforeCall(String propertyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyId' is set
        if (propertyId == null) {
            throw new ApiException("Missing the required parameter 'propertyId' when calling propertiesPropertyIdGet(Async)");
        }

        return propertiesPropertyIdGetCall(propertyId, _callback);

    }

    /**
     * Get a properties details
     * Get all information about a specific property by its ID.
     * @param propertyId  (required)
     * @return PropertiesPropertyIdGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful, property found, the whole property object is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We validate all calls to our API in a strict manner using Zod. In case of any validation errors, we send back a 400 response with a list of all validation errors. For more info see https://github.com/colinhacks/zod/blob/master/ERROR_HANDLING.md. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized, the api key in the \&quot;apiKey\&quot; header field is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public PropertiesPropertyIdGet200Response propertiesPropertyIdGet(String propertyId) throws ApiException {
        ApiResponse<PropertiesPropertyIdGet200Response> localVarResp = propertiesPropertyIdGetWithHttpInfo(propertyId);
        return localVarResp.getData();
    }

    /**
     * Get a properties details
     * Get all information about a specific property by its ID.
     * @param propertyId  (required)
     * @return ApiResponse&lt;PropertiesPropertyIdGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful, property found, the whole property object is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We validate all calls to our API in a strict manner using Zod. In case of any validation errors, we send back a 400 response with a list of all validation errors. For more info see https://github.com/colinhacks/zod/blob/master/ERROR_HANDLING.md. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized, the api key in the \&quot;apiKey\&quot; header field is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PropertiesPropertyIdGet200Response> propertiesPropertyIdGetWithHttpInfo(String propertyId) throws ApiException {
        okhttp3.Call localVarCall = propertiesPropertyIdGetValidateBeforeCall(propertyId, null);
        Type localVarReturnType = new TypeToken<PropertiesPropertyIdGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a properties details (asynchronously)
     * Get all information about a specific property by its ID.
     * @param propertyId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful, property found, the whole property object is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We validate all calls to our API in a strict manner using Zod. In case of any validation errors, we send back a 400 response with a list of all validation errors. For more info see https://github.com/colinhacks/zod/blob/master/ERROR_HANDLING.md. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized, the api key in the \&quot;apiKey\&quot; header field is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertiesPropertyIdGetAsync(String propertyId, final ApiCallback<PropertiesPropertyIdGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertiesPropertyIdGetValidateBeforeCall(propertyId, _callback);
        Type localVarReturnType = new TypeToken<PropertiesPropertyIdGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
